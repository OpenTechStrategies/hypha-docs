{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hypha documentation \u00b6 What is Hypha? Hypha is an open source submission management platform to receive and manage applications for funding. You are welcome to explore Hypha on our demo sandbox. Features \u00b6 Manage the collection and review of applications or submissions openly and efficiently. Customize all aspects of the process, forms, workflows, review options, and more. Automate workflows and integrate with other services (Slack, Mailgun, etc). Regularly audited software with many privacy and security features. View our Roadmap for upcoming features and enhancements. Technology \u00b6 Built with Django , Wagtail , and React Deploy with Heroku , Docker , or your own server .","title":"Home"},{"location":"#hypha-documentation","text":"What is Hypha? Hypha is an open source submission management platform to receive and manage applications for funding. You are welcome to explore Hypha on our demo sandbox.","title":"Hypha documentation"},{"location":"#features","text":"Manage the collection and review of applications or submissions openly and efficiently. Customize all aspects of the process, forms, workflows, review options, and more. Automate workflows and integrate with other services (Slack, Mailgun, etc). Regularly audited software with many privacy and security features. View our Roadmap for upcoming features and enhancements.","title":"Features"},{"location":"#technology","text":"Built with Django , Wagtail , and React Deploy with Heroku , Docker , or your own server .","title":"Technology"},{"location":"glossary/","text":"\ud83d\udcd6 Glossary \u00b6 Batch Action A grouping of applications organized based on some defined criteria Category Applicants have four themes they can select when applying to the Internet Freedom Fund. These categories include Applied Research, Technology, Digital Security, and Community Convening. Determination: Correspondence and communication between OTF and external stakeholders. Funds Includes Funds (IFF, CIF, Community Prototype Fund) and Labs (Community Lab, Legal Lab and Learning Lab). Rounds Temporal breakup for applications in a fund (applications in a round use the same application form for the sake of fairness) Include most funds, but these submissions, like perennials, appear in different forms each time. OTF\u2019s rounds appear as IFF-2018-05, IFF-2019-05, or IFF-2020-05 on the platform. Statuses Status on the workflow, examples are Internal Review and Ready for Determination. Leads Name of Round Lead associated with a particular submission. Reviewers Name of anyone designated with the WebApp authorized to submit a review. Reviewers include OTF staff and Advisory Council Members. Screening The process of culling and identifying whether an application falls within remit or out of remit. Other outside remit tags are ICT4D and Advocacy. Screening also refers to the default status, meaning the first status within the workflow, for all applications submitted. Submitted Date when application was submitted into the WebApp. This date is static. Last updated Date is dynamic, this date changes when an edit, revision, or another change has been made to the application within the system. Remit Parameters for applications that align with OTF\u2019s core values and mission. Service Providers an entity with a commercial relationship with the funding organization, to provide services directly to the funding organization, or the partners it funds Concept Note the first stage of a 2 stage application process. the initial application form an applicant uses to apply for funding. The concept note (CN) is short and asks high-level questions. It's purpose is to simplify the application process for the applicant. If the CN is accepted the applicant is invited to submit a full proposal. Full Proposal the second stage of a 2-stage application process. in the full proposal (FP) Project 1) a piece of work that is either proposed, underway, or completed, undertaken by a partner, 2) term used to describe an entity that has received funding from OTF Contract A written agreement between a partner and a funding organisation concerning the undertaking of activities, carried out by the partner for the funding organisation, in exchange for financial payment Staff role is able to edit applications, submit reviews, manage the workflow, create forms/funds/rounds. They have a high administrative access to the full fund management system. Advisory Council / External Reviewer An individual (not a member of staff of the funding organisation), with expertise in a given area, who is invited to review funding applications Team Admin role that can edit proposals during a workflow stage that \"staff\" and \"applicant\" cannot; authorize when a page could be published on the live website Applicant an entity who submits a request for financial support, thru the funding application process, to fund an amount of work. Approver an individual, usually member of staff, who can authorize a contract or payment request Partner For OTF, in the application phase, \"partner\" could view the application but is unable to submit a review and could submit payment requests. This role can see, edit, and communicate about a specific application. Finance role for staff with finance related functions. In Hypha they have dashboard to enable approval of invoices.","title":"Glossary"},{"location":"glossary/#glossary","text":"Batch Action A grouping of applications organized based on some defined criteria Category Applicants have four themes they can select when applying to the Internet Freedom Fund. These categories include Applied Research, Technology, Digital Security, and Community Convening. Determination: Correspondence and communication between OTF and external stakeholders. Funds Includes Funds (IFF, CIF, Community Prototype Fund) and Labs (Community Lab, Legal Lab and Learning Lab). Rounds Temporal breakup for applications in a fund (applications in a round use the same application form for the sake of fairness) Include most funds, but these submissions, like perennials, appear in different forms each time. OTF\u2019s rounds appear as IFF-2018-05, IFF-2019-05, or IFF-2020-05 on the platform. Statuses Status on the workflow, examples are Internal Review and Ready for Determination. Leads Name of Round Lead associated with a particular submission. Reviewers Name of anyone designated with the WebApp authorized to submit a review. Reviewers include OTF staff and Advisory Council Members. Screening The process of culling and identifying whether an application falls within remit or out of remit. Other outside remit tags are ICT4D and Advocacy. Screening also refers to the default status, meaning the first status within the workflow, for all applications submitted. Submitted Date when application was submitted into the WebApp. This date is static. Last updated Date is dynamic, this date changes when an edit, revision, or another change has been made to the application within the system. Remit Parameters for applications that align with OTF\u2019s core values and mission. Service Providers an entity with a commercial relationship with the funding organization, to provide services directly to the funding organization, or the partners it funds Concept Note the first stage of a 2 stage application process. the initial application form an applicant uses to apply for funding. The concept note (CN) is short and asks high-level questions. It's purpose is to simplify the application process for the applicant. If the CN is accepted the applicant is invited to submit a full proposal. Full Proposal the second stage of a 2-stage application process. in the full proposal (FP) Project 1) a piece of work that is either proposed, underway, or completed, undertaken by a partner, 2) term used to describe an entity that has received funding from OTF Contract A written agreement between a partner and a funding organisation concerning the undertaking of activities, carried out by the partner for the funding organisation, in exchange for financial payment Staff role is able to edit applications, submit reviews, manage the workflow, create forms/funds/rounds. They have a high administrative access to the full fund management system. Advisory Council / External Reviewer An individual (not a member of staff of the funding organisation), with expertise in a given area, who is invited to review funding applications Team Admin role that can edit proposals during a workflow stage that \"staff\" and \"applicant\" cannot; authorize when a page could be published on the live website Applicant an entity who submits a request for financial support, thru the funding application process, to fund an amount of work. Approver an individual, usually member of staff, who can authorize a contract or payment request Partner For OTF, in the application phase, \"partner\" could view the application but is unable to submit a review and could submit payment requests. This role can see, edit, and communicate about a specific application. Finance role for staff with finance related functions. In Hypha they have dashboard to enable approval of invoices.","title":"\ud83d\udcd6 Glossary"},{"location":"administrators/configuration/","text":"Configuration \u00b6 Under hypha/settings/ there are several python configuration files: We highly recommend using environment variables since it is more secure. It is also possible to add values to settings in a local.py files, see below. base.py \u2013 Base settings file. Other settings file start by loading this in. django-py - Django settings, loaded by base.py. Separated out to make base.py more manageable. dev.py \u2013 This is settings for development work. example.py \u2013 Example settings, not loaded anywhere. (This file should be expanded to cover more settings.) local.py.example \u2013 Copy and rename to \"local.py\" and it will be loaded by both production and dev settings. Main use is to allow developers an easy way to set and test settings. Can also be used in production but environment variables are the preferred and more secure way. production.py \u2013 This is settings for production use. test.py \u2013 This is the settings file for running tests. Project settings. \u00b6 SECRET_KEY is required \u00b6 SECRET_KEY = env.str('SECRET_KEY', None) ALLOWED_HOSTS is required \u00b6 ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', []) Database \u00b6 See https://docs.djangoproject.com/en/stable/ref/settings/#databases We use dj-database-url so also see https://github.com/jazzband/dj-database-url Be default Hypha looks for a database with the name \"hypha\". Set APP_NAME to change the database name. APP_NAME = env.str('APP_NAME', 'hypha') DATABASES = { 'default': dj_database_url.config( conn_max_age=600, default=f'postgres:///{APP_NAME}' ) } Language code in standard language id format: en, en-gb, en-us \u00b6 The corrosponding locale dir is named: en, en_GB, en_US LANGUAGE_CODE = env.str('LANGUAGE_CODE', 'en') Number of seconds that password reset and account activation links are valid (default 259200, 3 days). \u00b6 PASSWORD_RESET_TIMEOUT = env.int('PASSWORD_RESET_TIMEOUT', 259200) Seconds to enter password on password page while email change/2FA change (default 120). \u00b6 PASSWORD_PAGE_TIMEOUT = env.int('PASSWORD_PAGE_TIMEOUT', 120) Hypha custom settings \u00b6 Set the currency symbol to be used. \u00b6 CURRENCY_SYMBOL = env.str('CURRENCY_SYMBOL', '$') Default page pagination value. \u00b6 DEFAULT_PER_PAGE = 20 Webpack bundle loader. When set to False, the React app part of Hypha is disabled. \u00b6 ENABLE_WEBPACK_BUNDLES = env.bool('ENABLE_WEBPACK_BUNDLES', True) If Hypha should enforce 2FA for all users. \u00b6 ENFORCE_TWO_FACTOR = env.bool('ENFORCE_TWO_FACTOR', False) Set the allowed file extension for all uploads fields. \u00b6 FILE_ALLOWED_EXTENSIONS = ['doc', 'docx', 'odp', 'ods', 'odt', 'pdf', 'ppt', 'pptx', 'rtf', 'txt', 'xls', 'xlsx'] FILE_ACCEPT_ATTR_VALUE = ', '.join(['.' + ext for ext in FILE_ALLOWED_EXTENSIONS]) Give staff lead permissions. \u00b6 Only effects setting external reviewers for now. GIVE_STAFF_LEAD_PERMS = env.bool('GIVE_STAFF_LEAD_PERMS', False) Enable staff to \"hijack\" (become) other users. \u00b6 Good for testing, might not be a good idea in production. HIJACK_ENABLE = env.bool('HIJACK_ENABLE', False) Matomo tracking. \u00b6 MATOMO_SITEID = env.str('MATOMO_SITEID', None) MATOMO_URL = env.str('MATOMO_URL', None) Organisation name and e-mail address etc., used in e-mail templates etc. \u00b6 ORG_EMAIL = env.str('ORG_EMAIL', 'info@example.org') ORG_GUIDE_URL = env.str('ORG_GUIDE_URL', 'https://guide.example.org/') ORG_LONG_NAME = env.str('ORG_LONG_NAME', 'Acme Corporation') ORG_SHORT_NAME = env.str('ORG_SHORT_NAME', 'ACME') ORG_URL = env.str('ORG_URL', 'https://www.example.org/') Enable Projects in Hypha. Contracts and invoicing that comes after a submission is approved. \u00b6 PROJECTS_ENABLED = env.bool('PROJECTS_ENABLED', False) Auto create projects for approved applications. \u00b6 PROJECTS_AUTO_CREATE = env.bool('PROJECTS_AUTO_CREATE', False) Send out e-mail, slack messages etc. from Hypha. Set to true for production. \u00b6 SEND_MESSAGES = env.bool('SEND_MESSAGES', False) If automatic e-mails should be sent out to reviewers when submissions are ready for review. \u00b6 SEND_READY_FOR_REVIEW = env.bool('SEND_READY_FOR_REVIEW', True) Slack settings. \u00b6 SLACK_TOKEN = env.str('SLACK_TOKEN', None) SLACK_USERNAME = env.str('SLACK_USERNAME', 'Hypha') SLACK_DESTINATION_ROOM = env.str('SLACK_DESTINATION_ROOM', None) SLACK_DESTINATION_ROOM_COMMENTS = env.str('SLACK_DESTINATION_ROOM_COMMENTS', None) SLACK_TYPE_COMMENTS = env.list('SLACK_TYPE_COMMENTS', []) SLACK_ENDPOINT_URL = env.str('SLACK_ENDPOINT_URL', 'https://slack.com/api/chat.postMessage') SLACK_BACKEND = 'django_slack.backends.CeleryBackend' # UrllibBackend can be used for sync Staff e-mail domain. Used for OAUTH2 whitelist default value and staff account creation. \u00b6 STAFF_EMAIL_DOMAINS = env.list('STAFF_EMAIL_DOMAINS', []) Should staff be able to access/see draft submissions. \u00b6 SUBMISSIONS_DRAFT_ACCESS_STAFF = env.bool('SUBMISSIONS_DRAFT_ACCESS_STAFF', False) Columns to exclude from the submission tables. \u00b6 Possible values are: fund, round, status, lead, reviewers, screening_statuses, category_options, meta_terms SUBMISSIONS_TABLE_EXCLUDED_FIELDS = env.list('SUBMISSIONS_TABLE_EXCLUDED_FIELDS', []) Should submission automatically transition after all reviewer roles are assigned. \u00b6 TRANSITION_AFTER_ASSIGNED = env.bool('TRANSITION_AFTER_ASSIGNED', False) Should submission automatically transition after n number of reviews. \u00b6 Possible values are: False, 1,2,3,\u2026 TRANSITION_AFTER_REVIEWS = env.bool('TRANSITION_AFTER_REVIEWS', False) On Heroku, set to true if deploying to Heroku. \u00b6 env.bool('ON_HEROKU', False) Secure cookies \u00b6 Set this to enable Djangos settings for secure cookies. COOKIE_SECURE = env.bool('COOKIE_SECURE', False) E-mail settings \u00b6 From e-mail address \u00b6 SERVER_EMAIL = DEFAULT_FROM_EMAIL = env.str('SERVER_EMAIL', None) E-mail subject prefix \u00b6 EMAIL_SUBJECT_PREFIX = env.str('EMAIL_SUBJECT_PREFIX', None) Anymail \u00b6 Hypha uses the Anymail packaged so a number of mail backends are supported. Mailgun settings are present in the production file by default. Read more about Anymail: https://anymail.dev/en/stable/ MAILGUN_API_KEY = env.str('MAILGUN_API_KEY') MAILGUN_SENDER_DOMAIN = env.str('EMAIL_HOST', None) MAILGUN_API_URL = env.str('MAILGUN_API_URL', 'https://api.mailgun.net/v3') WEBHOOK_SECRET = env.str('ANYMAIL_WEBHOOK_SECRET', None) Local e-mail server \u00b6 It is also possible to use a local e-mail server. EMAIL_HOST = env.str('EMAIL_HOST', None) EMAIL_PORT = env.int('EMAIL_PORT', None) EMAIL_HOST_USER = env.str('EMAIL_HOST_USER', None) EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD', None) EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', False) EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', False) Sentry configuration. \u00b6 Track errors from your Hypha installation. SENTRY_DSN = env.str('SENTRY_DSN', None) S3 settings \u00b6 AWS_ACCESS_KEY_ID = env.str('AWS_ACCESS_KEY_ID', None) AWS_SECRET_ACCESS_KEY = env.str('AWS_SECRET_ACCESS_KEY', None) AWS_STORAGE_BUCKET_NAME = env.str('AWS_STORAGE_BUCKET_NAME', None) AWS_PRIVATE_CUSTOM_DOMAIN = env.str('AWS_PRIVATE_CUSTOM_DOMAIN', None) AWS_QUERYSTRING_EXPIRE = env.str('AWS_QUERYSTRING_EXPIRE', None) Basic auth settings \u00b6 It is possible to set Hypha behind basic authentication with IP whitelisting support. Good for test sites etc. See https://github.com/tm-kn/django-basic-auth-ip-whitelist BASIC_AUTH_LOGIN = env.str('BASIC_AUTH_LOGIN', None) BASIC_AUTH_PASSWORD = env.str('BASIC_AUTH_PASSWORD', None) BASIC_AUTH_WHITELISTED_HTTP_HOSTS = env.list('BASIC_AUTH_WHITELISTED_HTTP_HOSTS', []) BASIC_AUTH_WHITELISTED_IP_NETWORKS = env.list('BASIC_AUTH_WHITELISTED_IP_NETWORKS', [])","title":"Configuration"},{"location":"administrators/configuration/#configuration","text":"Under hypha/settings/ there are several python configuration files: We highly recommend using environment variables since it is more secure. It is also possible to add values to settings in a local.py files, see below. base.py \u2013 Base settings file. Other settings file start by loading this in. django-py - Django settings, loaded by base.py. Separated out to make base.py more manageable. dev.py \u2013 This is settings for development work. example.py \u2013 Example settings, not loaded anywhere. (This file should be expanded to cover more settings.) local.py.example \u2013 Copy and rename to \"local.py\" and it will be loaded by both production and dev settings. Main use is to allow developers an easy way to set and test settings. Can also be used in production but environment variables are the preferred and more secure way. production.py \u2013 This is settings for production use. test.py \u2013 This is the settings file for running tests.","title":"Configuration"},{"location":"administrators/configuration/#project-settings","text":"","title":"Project settings."},{"location":"administrators/configuration/#secret_key-is-required","text":"SECRET_KEY = env.str('SECRET_KEY', None)","title":"SECRET_KEY is required"},{"location":"administrators/configuration/#allowed_hosts-is-required","text":"ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', [])","title":"ALLOWED_HOSTS is required"},{"location":"administrators/configuration/#database","text":"See https://docs.djangoproject.com/en/stable/ref/settings/#databases We use dj-database-url so also see https://github.com/jazzband/dj-database-url Be default Hypha looks for a database with the name \"hypha\". Set APP_NAME to change the database name. APP_NAME = env.str('APP_NAME', 'hypha') DATABASES = { 'default': dj_database_url.config( conn_max_age=600, default=f'postgres:///{APP_NAME}' ) }","title":"Database"},{"location":"administrators/configuration/#language-code-in-standard-language-id-format-en-en-gb-en-us","text":"The corrosponding locale dir is named: en, en_GB, en_US LANGUAGE_CODE = env.str('LANGUAGE_CODE', 'en')","title":"Language code in standard language id format: en, en-gb, en-us"},{"location":"administrators/configuration/#number-of-seconds-that-password-reset-and-account-activation-links-are-valid-default-259200-3-days","text":"PASSWORD_RESET_TIMEOUT = env.int('PASSWORD_RESET_TIMEOUT', 259200)","title":"Number of seconds that password reset and account activation links are valid (default 259200, 3 days)."},{"location":"administrators/configuration/#seconds-to-enter-password-on-password-page-while-email-change2fa-change-default-120","text":"PASSWORD_PAGE_TIMEOUT = env.int('PASSWORD_PAGE_TIMEOUT', 120)","title":"Seconds to enter password on password page while email change/2FA change (default 120)."},{"location":"administrators/configuration/#hypha-custom-settings","text":"","title":"Hypha custom settings"},{"location":"administrators/configuration/#set-the-currency-symbol-to-be-used","text":"CURRENCY_SYMBOL = env.str('CURRENCY_SYMBOL', '$')","title":"Set the currency symbol to be used."},{"location":"administrators/configuration/#default-page-pagination-value","text":"DEFAULT_PER_PAGE = 20","title":"Default page pagination value."},{"location":"administrators/configuration/#webpack-bundle-loader-when-set-to-false-the-react-app-part-of-hypha-is-disabled","text":"ENABLE_WEBPACK_BUNDLES = env.bool('ENABLE_WEBPACK_BUNDLES', True)","title":"Webpack bundle loader. When set to False, the React app part of Hypha is disabled."},{"location":"administrators/configuration/#if-hypha-should-enforce-2fa-for-all-users","text":"ENFORCE_TWO_FACTOR = env.bool('ENFORCE_TWO_FACTOR', False)","title":"If Hypha should enforce 2FA for all users."},{"location":"administrators/configuration/#set-the-allowed-file-extension-for-all-uploads-fields","text":"FILE_ALLOWED_EXTENSIONS = ['doc', 'docx', 'odp', 'ods', 'odt', 'pdf', 'ppt', 'pptx', 'rtf', 'txt', 'xls', 'xlsx'] FILE_ACCEPT_ATTR_VALUE = ', '.join(['.' + ext for ext in FILE_ALLOWED_EXTENSIONS])","title":"Set the allowed file extension for all uploads fields."},{"location":"administrators/configuration/#give-staff-lead-permissions","text":"Only effects setting external reviewers for now. GIVE_STAFF_LEAD_PERMS = env.bool('GIVE_STAFF_LEAD_PERMS', False)","title":"Give staff lead permissions."},{"location":"administrators/configuration/#enable-staff-to-hijack-become-other-users","text":"Good for testing, might not be a good idea in production. HIJACK_ENABLE = env.bool('HIJACK_ENABLE', False)","title":"Enable staff to \"hijack\" (become) other users."},{"location":"administrators/configuration/#matomo-tracking","text":"MATOMO_SITEID = env.str('MATOMO_SITEID', None) MATOMO_URL = env.str('MATOMO_URL', None)","title":"Matomo tracking."},{"location":"administrators/configuration/#organisation-name-and-e-mail-address-etc-used-in-e-mail-templates-etc","text":"ORG_EMAIL = env.str('ORG_EMAIL', 'info@example.org') ORG_GUIDE_URL = env.str('ORG_GUIDE_URL', 'https://guide.example.org/') ORG_LONG_NAME = env.str('ORG_LONG_NAME', 'Acme Corporation') ORG_SHORT_NAME = env.str('ORG_SHORT_NAME', 'ACME') ORG_URL = env.str('ORG_URL', 'https://www.example.org/')","title":"Organisation name and e-mail address etc., used in e-mail templates etc."},{"location":"administrators/configuration/#enable-projects-in-hypha-contracts-and-invoicing-that-comes-after-a-submission-is-approved","text":"PROJECTS_ENABLED = env.bool('PROJECTS_ENABLED', False)","title":"Enable Projects in Hypha. Contracts and invoicing that comes after a submission is approved."},{"location":"administrators/configuration/#auto-create-projects-for-approved-applications","text":"PROJECTS_AUTO_CREATE = env.bool('PROJECTS_AUTO_CREATE', False)","title":"Auto create projects for approved applications."},{"location":"administrators/configuration/#send-out-e-mail-slack-messages-etc-from-hypha-set-to-true-for-production","text":"SEND_MESSAGES = env.bool('SEND_MESSAGES', False)","title":"Send out e-mail, slack messages etc. from Hypha. Set to true for production."},{"location":"administrators/configuration/#if-automatic-e-mails-should-be-sent-out-to-reviewers-when-submissions-are-ready-for-review","text":"SEND_READY_FOR_REVIEW = env.bool('SEND_READY_FOR_REVIEW', True)","title":"If automatic e-mails should be sent out to reviewers when submissions are ready for review."},{"location":"administrators/configuration/#slack-settings","text":"SLACK_TOKEN = env.str('SLACK_TOKEN', None) SLACK_USERNAME = env.str('SLACK_USERNAME', 'Hypha') SLACK_DESTINATION_ROOM = env.str('SLACK_DESTINATION_ROOM', None) SLACK_DESTINATION_ROOM_COMMENTS = env.str('SLACK_DESTINATION_ROOM_COMMENTS', None) SLACK_TYPE_COMMENTS = env.list('SLACK_TYPE_COMMENTS', []) SLACK_ENDPOINT_URL = env.str('SLACK_ENDPOINT_URL', 'https://slack.com/api/chat.postMessage') SLACK_BACKEND = 'django_slack.backends.CeleryBackend' # UrllibBackend can be used for sync","title":"Slack settings."},{"location":"administrators/configuration/#staff-e-mail-domain-used-for-oauth2-whitelist-default-value-and-staff-account-creation","text":"STAFF_EMAIL_DOMAINS = env.list('STAFF_EMAIL_DOMAINS', [])","title":"Staff e-mail domain. Used for OAUTH2 whitelist default value and staff account creation."},{"location":"administrators/configuration/#should-staff-be-able-to-accesssee-draft-submissions","text":"SUBMISSIONS_DRAFT_ACCESS_STAFF = env.bool('SUBMISSIONS_DRAFT_ACCESS_STAFF', False)","title":"Should staff be able to access/see draft submissions."},{"location":"administrators/configuration/#columns-to-exclude-from-the-submission-tables","text":"Possible values are: fund, round, status, lead, reviewers, screening_statuses, category_options, meta_terms SUBMISSIONS_TABLE_EXCLUDED_FIELDS = env.list('SUBMISSIONS_TABLE_EXCLUDED_FIELDS', [])","title":"Columns to exclude from the submission tables."},{"location":"administrators/configuration/#should-submission-automatically-transition-after-all-reviewer-roles-are-assigned","text":"TRANSITION_AFTER_ASSIGNED = env.bool('TRANSITION_AFTER_ASSIGNED', False)","title":"Should submission automatically transition after all reviewer roles are assigned."},{"location":"administrators/configuration/#should-submission-automatically-transition-after-n-number-of-reviews","text":"Possible values are: False, 1,2,3,\u2026 TRANSITION_AFTER_REVIEWS = env.bool('TRANSITION_AFTER_REVIEWS', False)","title":"Should submission automatically transition after n number of reviews."},{"location":"administrators/configuration/#on-heroku-set-to-true-if-deploying-to-heroku","text":"env.bool('ON_HEROKU', False)","title":"On Heroku, set to true if deploying to Heroku."},{"location":"administrators/configuration/#secure-cookies","text":"Set this to enable Djangos settings for secure cookies. COOKIE_SECURE = env.bool('COOKIE_SECURE', False)","title":"Secure cookies"},{"location":"administrators/configuration/#e-mail-settings","text":"","title":"E-mail settings"},{"location":"administrators/configuration/#from-e-mail-address","text":"SERVER_EMAIL = DEFAULT_FROM_EMAIL = env.str('SERVER_EMAIL', None)","title":"From e-mail address"},{"location":"administrators/configuration/#e-mail-subject-prefix","text":"EMAIL_SUBJECT_PREFIX = env.str('EMAIL_SUBJECT_PREFIX', None)","title":"E-mail subject prefix"},{"location":"administrators/configuration/#anymail","text":"Hypha uses the Anymail packaged so a number of mail backends are supported. Mailgun settings are present in the production file by default. Read more about Anymail: https://anymail.dev/en/stable/ MAILGUN_API_KEY = env.str('MAILGUN_API_KEY') MAILGUN_SENDER_DOMAIN = env.str('EMAIL_HOST', None) MAILGUN_API_URL = env.str('MAILGUN_API_URL', 'https://api.mailgun.net/v3') WEBHOOK_SECRET = env.str('ANYMAIL_WEBHOOK_SECRET', None)","title":"Anymail"},{"location":"administrators/configuration/#local-e-mail-server","text":"It is also possible to use a local e-mail server. EMAIL_HOST = env.str('EMAIL_HOST', None) EMAIL_PORT = env.int('EMAIL_PORT', None) EMAIL_HOST_USER = env.str('EMAIL_HOST_USER', None) EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD', None) EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', False) EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', False)","title":"Local e-mail server"},{"location":"administrators/configuration/#sentry-configuration","text":"Track errors from your Hypha installation. SENTRY_DSN = env.str('SENTRY_DSN', None)","title":"Sentry configuration."},{"location":"administrators/configuration/#s3-settings","text":"AWS_ACCESS_KEY_ID = env.str('AWS_ACCESS_KEY_ID', None) AWS_SECRET_ACCESS_KEY = env.str('AWS_SECRET_ACCESS_KEY', None) AWS_STORAGE_BUCKET_NAME = env.str('AWS_STORAGE_BUCKET_NAME', None) AWS_PRIVATE_CUSTOM_DOMAIN = env.str('AWS_PRIVATE_CUSTOM_DOMAIN', None) AWS_QUERYSTRING_EXPIRE = env.str('AWS_QUERYSTRING_EXPIRE', None)","title":"S3 settings"},{"location":"administrators/configuration/#basic-auth-settings","text":"It is possible to set Hypha behind basic authentication with IP whitelisting support. Good for test sites etc. See https://github.com/tm-kn/django-basic-auth-ip-whitelist BASIC_AUTH_LOGIN = env.str('BASIC_AUTH_LOGIN', None) BASIC_AUTH_PASSWORD = env.str('BASIC_AUTH_PASSWORD', None) BASIC_AUTH_WHITELISTED_HTTP_HOSTS = env.list('BASIC_AUTH_WHITELISTED_HTTP_HOSTS', []) BASIC_AUTH_WHITELISTED_IP_NETWORKS = env.list('BASIC_AUTH_WHITELISTED_IP_NETWORKS', [])","title":"Basic auth settings"},{"location":"administrators/customising/","text":"Customising \u00b6 Templates \u00b6 You can override any Hypha template by adding a copy inside the templates_custom directory. As an example lets override the hypha/apply/dashboard/templates/dashboard/applicant_dashboard.html template. Place a copy of the template in hypha/templates_custom/dashboard/applicant_dashboard.html . Make any needed changes to the template and it will be used instead of the original template. Classes \u00b6 A number of classes can be overridden by settings. You develop your own version of the class in question and then point the setting to that class. It will then be used in place of the default class. List of classes and their settings: aaa -> AAA bbb -> BBB","title":"Customising"},{"location":"administrators/customising/#customising","text":"","title":"Customising"},{"location":"administrators/customising/#templates","text":"You can override any Hypha template by adding a copy inside the templates_custom directory. As an example lets override the hypha/apply/dashboard/templates/dashboard/applicant_dashboard.html template. Place a copy of the template in hypha/templates_custom/dashboard/applicant_dashboard.html . Make any needed changes to the template and it will be used instead of the original template.","title":"Templates"},{"location":"administrators/customising/#classes","text":"A number of classes can be overridden by settings. You develop your own version of the class in question and then point the setting to that class. It will then be used in place of the default class. List of classes and their settings: aaa -> AAA bbb -> BBB","title":"Classes"},{"location":"administrators/deployment/","text":"Deployment \u00b6 Considering Hypha? \u00b6 If you are considering deploying Hypha, there are several ways to deploy it. It includes a Django web application python python , and requires a PostgreSQL database server, and Nginx or Apache or Apache web server. Stand Alone \u00b6 This requires a Linux server It has been tested with Ubuntu, but should work with any flavor It has been tested with Ubuntu, but should work with any flavor . Heroku \u00b6 This is the primary way Hypha has been deployed so far. It is fairly straightforward and well-tested Docker \u00b6 This deployment so far has been tested and used only for development purposes, but should theoretically work for production deployment.","title":"Deployment"},{"location":"administrators/deployment/#deployment","text":"","title":"Deployment"},{"location":"administrators/deployment/#considering-hypha","text":"If you are considering deploying Hypha, there are several ways to deploy it. It includes a Django web application python python , and requires a PostgreSQL database server, and Nginx or Apache or Apache web server.","title":"Considering Hypha?"},{"location":"administrators/deployment/#stand-alone","text":"This requires a Linux server It has been tested with Ubuntu, but should work with any flavor It has been tested with Ubuntu, but should work with any flavor .","title":"Stand Alone"},{"location":"administrators/deployment/#heroku","text":"This is the primary way Hypha has been deployed so far. It is fairly straightforward and well-tested","title":"Heroku"},{"location":"administrators/deployment/#docker","text":"This deployment so far has been tested and used only for development purposes, but should theoretically work for production deployment.","title":"Docker"},{"location":"administrators/deployment/docker/","text":"Docker \u00b6 Requirements \u00b6 Recent version of Docker . Domains \u00b6 You will need two domain to run this app. One for the public site and one for the apply site. Make sure your DNS points to the server running these containers. Get the code \u00b6 $ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha Everything from now on will happen inside the hypha directory. Docker \u00b6 Modify Docker and Nginx Files \u00b6 There are several files you will need to modify before you run docker-compose. docker-compose: change line dockerfile: docker/Dockerfile.dev to read dockerfile: docker/Dockerfile.prod change ports in web section to '80:80' Dockerfile.prod: in Environment variables section: add your domain. Move nginx/hypha.conf to nginx/hypha-dev.conf and move nginx/hypha-prod.conf to nginx/hypha.conf Build the Docker images Move to the \"docker\" directory. $ cd docker Run the docker compose command to build the images. This will take some time. If you need to rebuild the images to get a later version just run the \"build\" again. $ docker-compose build Start the docker environment \u00b6 To start the docker containers you use the \"up\" command. This command you will use each time you want to start up and use this docker environment. $ docker-compose up Access the docker environment \u00b6 Go to your domain - you should see the app deployed. Run commands in the docker environment \u00b6 To get bash shell on the container that runs the Django app, use this command. docker-compose exec py bash Here you can issue django commands as normal. You might want to change the user - the default is circleci, but most of the code is owned by the user 'node'. To do that: docker-compose exec -u node py bash To get a shell on the container that runs Postgres, use this command. docker-compose exec db bash Stop the docker environment. \u00b6 Press Ctrl + C in the terminal window. Other considerations \u00b6 Setting your own PostgreSQL password \u00b6 In the docker-compose.yml file, there is under db, an environment section with database name, user, and password. You can set those, then remember, in the Docker file, to use those in the DATABASE_URL environment variable. SSL certificates \u00b6 This setup is port 80 only. To set up an SSL certificate, you'd have to: add port 443 to the nginx section of the docker-compose file add a volume to hold your certs add the certification info to the nginx configuration file","title":"Docker"},{"location":"administrators/deployment/docker/#docker","text":"","title":"Docker"},{"location":"administrators/deployment/docker/#requirements","text":"Recent version of Docker .","title":"Requirements"},{"location":"administrators/deployment/docker/#domains","text":"You will need two domain to run this app. One for the public site and one for the apply site. Make sure your DNS points to the server running these containers.","title":"Domains"},{"location":"administrators/deployment/docker/#get-the-code","text":"$ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha Everything from now on will happen inside the hypha directory.","title":"Get the code"},{"location":"administrators/deployment/docker/#docker_1","text":"","title":"Docker"},{"location":"administrators/deployment/docker/#modify-docker-and-nginx-files","text":"There are several files you will need to modify before you run docker-compose. docker-compose: change line dockerfile: docker/Dockerfile.dev to read dockerfile: docker/Dockerfile.prod change ports in web section to '80:80' Dockerfile.prod: in Environment variables section: add your domain. Move nginx/hypha.conf to nginx/hypha-dev.conf and move nginx/hypha-prod.conf to nginx/hypha.conf Build the Docker images Move to the \"docker\" directory. $ cd docker Run the docker compose command to build the images. This will take some time. If you need to rebuild the images to get a later version just run the \"build\" again. $ docker-compose build","title":"Modify Docker and Nginx Files"},{"location":"administrators/deployment/docker/#start-the-docker-environment","text":"To start the docker containers you use the \"up\" command. This command you will use each time you want to start up and use this docker environment. $ docker-compose up","title":"Start the docker environment"},{"location":"administrators/deployment/docker/#access-the-docker-environment","text":"Go to your domain - you should see the app deployed.","title":"Access the docker environment"},{"location":"administrators/deployment/docker/#run-commands-in-the-docker-environment","text":"To get bash shell on the container that runs the Django app, use this command. docker-compose exec py bash Here you can issue django commands as normal. You might want to change the user - the default is circleci, but most of the code is owned by the user 'node'. To do that: docker-compose exec -u node py bash To get a shell on the container that runs Postgres, use this command. docker-compose exec db bash","title":"Run commands in  the docker environment"},{"location":"administrators/deployment/docker/#stop-the-docker-environment","text":"Press Ctrl + C in the terminal window.","title":"Stop the docker environment."},{"location":"administrators/deployment/docker/#other-considerations","text":"","title":"Other considerations"},{"location":"administrators/deployment/docker/#setting-your-own-postgresql-password","text":"In the docker-compose.yml file, there is under db, an environment section with database name, user, and password. You can set those, then remember, in the Docker file, to use those in the DATABASE_URL environment variable.","title":"Setting your own PostgreSQL password"},{"location":"administrators/deployment/docker/#ssl-certificates","text":"This setup is port 80 only. To set up an SSL certificate, you'd have to: add port 443 to the nginx section of the docker-compose file add a volume to hold your certs add the certification info to the nginx configuration file","title":"SSL certificates"},{"location":"administrators/deployment/heroku/","text":"Heroku \u00b6 DNS \u00b6 Set up two addresses per environment, one for the public site and one for the apply site. Add the addresses first to Heroku to get the the DNS target for the CNAME entry. OBS! If you are using Cloudflare ignore the DNS targets and use the Heroku application URL instead, something like [dev-app-name].herokuapp.com . Add redirects for robots.txt and favicon.ico to /static/robots.txt and /static/favicon.ico . Heroku \u00b6 Create a Heroku app for your project. A dev, test and live environment is good to have. Connect the Heroku app to your git repo or push your code directly to Heroku. If you are using GitHub I recommend selecting it as the \"deployment method\". Then so the following steps for each environment. Set these settings as a minimum: API_BASE_URL BASIC_AUTH_ENABLED BASIC_AUTH_LOGIN BASIC_AUTH_PASSWORD DJANGO_SETTINGS_MODULE EMAIL_HOST ON_HEROKU=true so correct production settings gets loaded so correct production settings gets loaded ORG_LONG_NAME ORG_SHORT_NAME ORG_EMAIL SECRET_KEY SEND_MESSAGES SERVER_EMAIL STAFF_EMAIL_DOMAINS Generate secret key with: python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\" Add Heroku Postgres as a add-on. \"Hobby dev\" or \"Hobby basic\" works for dev and test and \"Standard 0\" is a good start for production. Add buildpacks for Nodejs and Python, make sure Nodejs is listed first. Temporarily remove the \"release\" step from the \"Procfile\". It has a clear cache step that will fail until the cache tables are created. Deploy the appropriate branch. Activate dynos to run your app. For dev and test the \"Hobby\" level works well. For production a \"Standard-2X\" with a dyno count of 2 and WEB_CONCURRENCY set to 3 performance well. Run the following commands from the command line with the help of heroku-cli. If it's the first time you use heroku-cli you first need to login with heroku login . $ heroku run python manage.py migrate -a [name-of-app] $ heroku run python manage.py createcachetable -a [name-of-app] $ heroku run python manage.py createsuperuser -a [name-of-app] $ heroku run python manage.py wagtailsiteupdate [the-public-address] [the-apply-address] 443 -a [name-of-app] Now add the \"release\" step back to the \"Procfile\" and deploy again. You should now have a running site. AWS S3 \u00b6 Set up a bucket for private files and another for public files. Private files are uploads on submissions. Set these settings as a minimum: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_STORAGE_BUCKET_NAME most often same as AWS\\_PUBLIC\\_BUCKET\\_NAME most often same as AWS\\_PUBLIC\\_BUCKET\\_NAME AWS_PRIVATE_BUCKET_NAME AWS_PUBLIC_BUCKET_NAME Optionally set these as well: AWS_PUBLIC_CUSTOM_DOMAIN AWS_QUERYSTRING_EXPIRE Private bucket \u00b6 Properties: Versioning enabled. Default encryption enables AES-256 CORS configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>POST</AllowedMethod> <AllowedMethod>PUT</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration> Public bucket \u00b6 Properties: Versioning enabled. Access Control List: Public access -> Everyone -> List Yes CORS configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>POST</AllowedMethod> <AllowedMethod>PUT</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration> Bucket policy: { \"Version\": \"2012-10-17\", \"Id\": \"Policy1562302603386\", \"Statement\": [ { \"Sid\": \"Stmt1562302600239\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::public.example.com/*\" } ] } Mailgun \u00b6 Set: MAILGUN_API_KEY And it should just work.","title":"Heroku"},{"location":"administrators/deployment/heroku/#heroku","text":"","title":"Heroku"},{"location":"administrators/deployment/heroku/#dns","text":"Set up two addresses per environment, one for the public site and one for the apply site. Add the addresses first to Heroku to get the the DNS target for the CNAME entry. OBS! If you are using Cloudflare ignore the DNS targets and use the Heroku application URL instead, something like [dev-app-name].herokuapp.com . Add redirects for robots.txt and favicon.ico to /static/robots.txt and /static/favicon.ico .","title":"DNS"},{"location":"administrators/deployment/heroku/#heroku_1","text":"Create a Heroku app for your project. A dev, test and live environment is good to have. Connect the Heroku app to your git repo or push your code directly to Heroku. If you are using GitHub I recommend selecting it as the \"deployment method\". Then so the following steps for each environment. Set these settings as a minimum: API_BASE_URL BASIC_AUTH_ENABLED BASIC_AUTH_LOGIN BASIC_AUTH_PASSWORD DJANGO_SETTINGS_MODULE EMAIL_HOST ON_HEROKU=true so correct production settings gets loaded so correct production settings gets loaded ORG_LONG_NAME ORG_SHORT_NAME ORG_EMAIL SECRET_KEY SEND_MESSAGES SERVER_EMAIL STAFF_EMAIL_DOMAINS Generate secret key with: python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\" Add Heroku Postgres as a add-on. \"Hobby dev\" or \"Hobby basic\" works for dev and test and \"Standard 0\" is a good start for production. Add buildpacks for Nodejs and Python, make sure Nodejs is listed first. Temporarily remove the \"release\" step from the \"Procfile\". It has a clear cache step that will fail until the cache tables are created. Deploy the appropriate branch. Activate dynos to run your app. For dev and test the \"Hobby\" level works well. For production a \"Standard-2X\" with a dyno count of 2 and WEB_CONCURRENCY set to 3 performance well. Run the following commands from the command line with the help of heroku-cli. If it's the first time you use heroku-cli you first need to login with heroku login . $ heroku run python manage.py migrate -a [name-of-app] $ heroku run python manage.py createcachetable -a [name-of-app] $ heroku run python manage.py createsuperuser -a [name-of-app] $ heroku run python manage.py wagtailsiteupdate [the-public-address] [the-apply-address] 443 -a [name-of-app] Now add the \"release\" step back to the \"Procfile\" and deploy again. You should now have a running site.","title":"Heroku"},{"location":"administrators/deployment/heroku/#aws-s3","text":"Set up a bucket for private files and another for public files. Private files are uploads on submissions. Set these settings as a minimum: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_STORAGE_BUCKET_NAME most often same as AWS\\_PUBLIC\\_BUCKET\\_NAME most often same as AWS\\_PUBLIC\\_BUCKET\\_NAME AWS_PRIVATE_BUCKET_NAME AWS_PUBLIC_BUCKET_NAME Optionally set these as well: AWS_PUBLIC_CUSTOM_DOMAIN AWS_QUERYSTRING_EXPIRE","title":"AWS S3"},{"location":"administrators/deployment/heroku/#private-bucket","text":"Properties: Versioning enabled. Default encryption enables AES-256 CORS configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>POST</AllowedMethod> <AllowedMethod>PUT</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration>","title":"Private bucket"},{"location":"administrators/deployment/heroku/#public-bucket","text":"Properties: Versioning enabled. Access Control List: Public access -> Everyone -> List Yes CORS configuration: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <AllowedMethod>POST</AllowedMethod> <AllowedMethod>PUT</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <AllowedHeader>*</AllowedHeader> </CORSRule> </CORSConfiguration> Bucket policy: { \"Version\": \"2012-10-17\", \"Id\": \"Policy1562302603386\", \"Statement\": [ { \"Sid\": \"Stmt1562302600239\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": \"s3:GetObject\", \"Resource\": \"arn:aws:s3:::public.example.com/*\" } ] }","title":"Public bucket"},{"location":"administrators/deployment/heroku/#mailgun","text":"Set: MAILGUN_API_KEY And it should just work.","title":"Mailgun"},{"location":"administrators/deployment/stand-alone/","text":"Stand Alone \u00b6 Standalone Server/VPS \u00b6 This process was tested on Ubuntu 18.04LTS. It should work on any Debian-based system. Get the code \u00b6 git clone https://github.com/HyphaApp/hypha.git [your-site-directory] Basic installation steps. \u00b6 These are the basic packages needed before you can start the installation process. python3-pip and python3-venv - install using sudo apt-get install python3-pip python3-venv postgresql version 12.x version 12.x use sudo apt-get install postgresql postgresql-contrib postgresql-server-dev-12 to install nodejs version v16.x version v16.x , use nodesource. Add the PPA to your sources list by running this script: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - then sudo apt-get install nodejs Python virtual environment \u00b6 Create the virtual environment, specify the python binary to use and the directory. Then source the activate script to activate the virtual environment. The last line tells Django what settings to use. $ python3 -m venv venv/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.production Inside your activated virtual environment you will use plain python and pip commands. Everything inside the virtual environment is python 3 since we specified that when we created it. Install Python packages \u00b6 Next, install the required packages using: $ pip install -r requirements.txt Install Node packages \u00b6 All the needed Node packages are listed in package.json . Install them with this command. $ npm install You will also need the gulp task manager. On some systems you might need to run this command with sudo . $ npm install -g gulp-cli The Postgres database \u00b6 Postgresql is the database used. Start the server you installed above using sudo service postgresql start , then log into the postgres superuser, sudo su - postgres and enter the postgresql cli with psql . In the CLI, use these commands: CREATE DATABASE hypha; CREATE USER [linux username] WITH SUPERUSER LOGIN; Also, make sure that this user has trust access in pg_hba.conf. These settings can be restricted later as required. Running the app \u00b6 The application needs a secret key: export SECRET_KEY='SOME SECRET KEY HERE' . To begin with, set the export SECURE_SSL_REDIRECT=false to prevent SSL redirect. When you've set up SSL for your server, you can change that setting later. Then use the following commands to test run the server: gulp deploy python manage.py collectstatic --noinput python manage.py createcachetable python manage.py migrate --noinput python manage.py clear_cache --cache=default --cache=wagtailcache python manage.py createsuperuser python manage.py wagtailsiteupdate server.domain apply.server.domain 80 python manage.py runserver runs development server at [http://127.0.0.1:8000](http://127.0.0.1:8000) runs development server at [http://127.0.0.1:8000](http://127.0.0.1:8000) You should see the home page of the server. That's great. You can stop the server, and then we can then take the next steps. Deploy with nginx/gunicorn \u00b6 Make sure gunicorn is installed it should be it should be . Do a test run with gunicorn: gunicorn --bind 0.0.0.0:<some port> hypha.wsgi:application This might not work. It's OK if it doesn't work - you can go on anyway. To make gunicorn start automatically with systemd see https://docs.gunicorn.org/en/stable/deploy.html#systemd . Set up DNS so that server.domain and apply.server.domain point to the server you've installed the application. Install nginx if you haven't already sudo apt-get install nginx <code>sudo apt-get install nginx</code> . You'll need to add two new config files for nginx in /etc/nginx/sites-available: public server { listen 80; server_name server.domain; client_max_body_size 2621440; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://unix:/run/gunicorn.sock; } } apply server { listen 80; server_name apply.server.domain; client_max_body_size 2621440; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://unix:/run/gunicorn.sock; } } The client_max_body_size configuration directive is very important. Hypha uploads files to the server in 2.5MB chunks. However, by default, nginx limits uploads to 1MB chunks. The result is that users of a Hypha system running \"behind\" nginx will see file upload failures for any file larger than 1MB. Using the client_max_body_size directive in the nginx server context is, therefore, required to make it possible for users to upload files that are bigger than 1MB in size. Symbolically link these to sites-enabled: sudo ln -s /etc/nginx/sites-available/public /etc/nginx/sites-enabled && sudo ln -s /etc/nginx/sites-available/apply /etc/nginx/sites-enabled . Then restart nginx using sudo systemctl restart nginx . You should then be able to access your application at http://server.domain and http://apply.server.domain . Adding SSL using a Let's Encrypt certificate. \u00b6 It's very easy to add SSL via a Let's Encrypt certificate. See instructions at https://certbot.eff.org . Follow the instructions, and you're done. Administration \u00b6 The Django Administration panel is connected to the 'apply' domain: so access that via http://apply.server.domain/django-admin/ use the email address and password you set in the python manage.py createsuperuser step above. step above. use the email address and password you set in the <code>python manage.py createsuperuser</code> step above. step above. The Apply dashboard is here: http://apply.server.domain/dashboard/ . The Apply Wagtail admin: http://apply.server.domain/admin settings \u00b6 Here is a list of settings that can be set as environment variables or in a hypha/settings/local.py file. None optional: API_BASE_URL: https://apply.example.org/api CACHE_CONTROL_MAX_AGE: 14400 COOKIE_SECURE: true DJANGO_SETTINGS_MODULE: hypha.settings.production EMAIL_HOST: apply.example.org ORG_EMAIL: hello@example.org ORG_GUIDE_URL: https://guide.example.org/ ORG_LONG_NAME: Long name of your organisation ORG_SHORT_NAME: Short org name PRIMARY_HOST: www.example.org PROJECTS_AUTO_CREATE: false PROJECTS_ENABLED: true SECRET_KEY: [KEY] SEND_MESSAGES: true SERVER_EMAIL: app@apply.example.org Optional: ANYMAIL_WEBHOOK_SECRET: [KEY] AWS_ACCESS_KEY_ID: [KEY] AWS_DEFAULT_ACL: None AWS_MIGRATION_ACCESS_KEY_ID: [KEY] AWS_MIGRATION_BUCKET_NAME: backup.example.org AWS_MIGRATION_SECRET_ACCESS_KEY: [KEY] AWS_PRIVATE_BUCKET_NAME: private.example.org AWS_PUBLIC_BUCKET_NAME: public.example.org AWS_PUBLIC_CUSTOM_DOMAIN: public.example.org AWS_QUERYSTRING_EXPIRE: 600 AWS_SECRET_ACCESS_KEY: [KEY] AWS_STORAGE_BUCKET_NAME: public.example.org BASIC_AUTH_ENABLED: true BASIC_AUTH_LOGIN: [USER] BASIC_AUTH_PASSWORD: [PASS] BASIC_AUTH_WHITELISTED_HTTP_HOSTS: www.example.org,apply.example.org CLOUDFLARE_API_ZONEID: [KEY] CLOUDFLARE_BEARER_TOKEN: [KEY] MAILCHIMP_API_KEY: [KEY]-us10 MAILCHIMP_LIST_ID: [ID] MAILGUN_API_KEY: [KEY] SEND_READY_FOR_REVIEW: false SLACK_DESTINATION_ROOM: #notify SLACK_DESTINATION_ROOM_COMMENTS: #notes SLACK_DESTINATION_URL: https://slackbot-example.org/incoming/[KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: [KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: [KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS: example.org","title":"Stand Alone"},{"location":"administrators/deployment/stand-alone/#stand-alone","text":"","title":"Stand Alone"},{"location":"administrators/deployment/stand-alone/#standalone-servervps","text":"This process was tested on Ubuntu 18.04LTS. It should work on any Debian-based system.","title":"Standalone Server/VPS"},{"location":"administrators/deployment/stand-alone/#get-the-code","text":"git clone https://github.com/HyphaApp/hypha.git [your-site-directory]","title":"Get the code"},{"location":"administrators/deployment/stand-alone/#basic-installation-steps","text":"These are the basic packages needed before you can start the installation process. python3-pip and python3-venv - install using sudo apt-get install python3-pip python3-venv postgresql version 12.x version 12.x use sudo apt-get install postgresql postgresql-contrib postgresql-server-dev-12 to install nodejs version v16.x version v16.x , use nodesource. Add the PPA to your sources list by running this script: curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - then sudo apt-get install nodejs","title":"Basic installation steps."},{"location":"administrators/deployment/stand-alone/#python-virtual-environment","text":"Create the virtual environment, specify the python binary to use and the directory. Then source the activate script to activate the virtual environment. The last line tells Django what settings to use. $ python3 -m venv venv/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.production Inside your activated virtual environment you will use plain python and pip commands. Everything inside the virtual environment is python 3 since we specified that when we created it.","title":"Python virtual environment"},{"location":"administrators/deployment/stand-alone/#install-python-packages","text":"Next, install the required packages using: $ pip install -r requirements.txt","title":"Install Python packages"},{"location":"administrators/deployment/stand-alone/#install-node-packages","text":"All the needed Node packages are listed in package.json . Install them with this command. $ npm install You will also need the gulp task manager. On some systems you might need to run this command with sudo . $ npm install -g gulp-cli","title":"Install Node packages"},{"location":"administrators/deployment/stand-alone/#the-postgres-database","text":"Postgresql is the database used. Start the server you installed above using sudo service postgresql start , then log into the postgres superuser, sudo su - postgres and enter the postgresql cli with psql . In the CLI, use these commands: CREATE DATABASE hypha; CREATE USER [linux username] WITH SUPERUSER LOGIN; Also, make sure that this user has trust access in pg_hba.conf. These settings can be restricted later as required.","title":"The Postgres database"},{"location":"administrators/deployment/stand-alone/#running-the-app","text":"The application needs a secret key: export SECRET_KEY='SOME SECRET KEY HERE' . To begin with, set the export SECURE_SSL_REDIRECT=false to prevent SSL redirect. When you've set up SSL for your server, you can change that setting later. Then use the following commands to test run the server: gulp deploy python manage.py collectstatic --noinput python manage.py createcachetable python manage.py migrate --noinput python manage.py clear_cache --cache=default --cache=wagtailcache python manage.py createsuperuser python manage.py wagtailsiteupdate server.domain apply.server.domain 80 python manage.py runserver runs development server at [http://127.0.0.1:8000](http://127.0.0.1:8000) runs development server at [http://127.0.0.1:8000](http://127.0.0.1:8000) You should see the home page of the server. That's great. You can stop the server, and then we can then take the next steps.","title":"Running the app"},{"location":"administrators/deployment/stand-alone/#deploy-with-nginxgunicorn","text":"Make sure gunicorn is installed it should be it should be . Do a test run with gunicorn: gunicorn --bind 0.0.0.0:<some port> hypha.wsgi:application This might not work. It's OK if it doesn't work - you can go on anyway. To make gunicorn start automatically with systemd see https://docs.gunicorn.org/en/stable/deploy.html#systemd . Set up DNS so that server.domain and apply.server.domain point to the server you've installed the application. Install nginx if you haven't already sudo apt-get install nginx <code>sudo apt-get install nginx</code> . You'll need to add two new config files for nginx in /etc/nginx/sites-available: public server { listen 80; server_name server.domain; client_max_body_size 2621440; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://unix:/run/gunicorn.sock; } } apply server { listen 80; server_name apply.server.domain; client_max_body_size 2621440; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://unix:/run/gunicorn.sock; } } The client_max_body_size configuration directive is very important. Hypha uploads files to the server in 2.5MB chunks. However, by default, nginx limits uploads to 1MB chunks. The result is that users of a Hypha system running \"behind\" nginx will see file upload failures for any file larger than 1MB. Using the client_max_body_size directive in the nginx server context is, therefore, required to make it possible for users to upload files that are bigger than 1MB in size. Symbolically link these to sites-enabled: sudo ln -s /etc/nginx/sites-available/public /etc/nginx/sites-enabled && sudo ln -s /etc/nginx/sites-available/apply /etc/nginx/sites-enabled . Then restart nginx using sudo systemctl restart nginx . You should then be able to access your application at http://server.domain and http://apply.server.domain .","title":"Deploy with nginx/gunicorn"},{"location":"administrators/deployment/stand-alone/#adding-ssl-using-a-lets-encrypt-certificate","text":"It's very easy to add SSL via a Let's Encrypt certificate. See instructions at https://certbot.eff.org . Follow the instructions, and you're done.","title":"Adding SSL using a Let's Encrypt certificate."},{"location":"administrators/deployment/stand-alone/#administration","text":"The Django Administration panel is connected to the 'apply' domain: so access that via http://apply.server.domain/django-admin/ use the email address and password you set in the python manage.py createsuperuser step above. step above. use the email address and password you set in the <code>python manage.py createsuperuser</code> step above. step above. The Apply dashboard is here: http://apply.server.domain/dashboard/ . The Apply Wagtail admin: http://apply.server.domain/admin","title":"Administration"},{"location":"administrators/deployment/stand-alone/#settings","text":"Here is a list of settings that can be set as environment variables or in a hypha/settings/local.py file. None optional: API_BASE_URL: https://apply.example.org/api CACHE_CONTROL_MAX_AGE: 14400 COOKIE_SECURE: true DJANGO_SETTINGS_MODULE: hypha.settings.production EMAIL_HOST: apply.example.org ORG_EMAIL: hello@example.org ORG_GUIDE_URL: https://guide.example.org/ ORG_LONG_NAME: Long name of your organisation ORG_SHORT_NAME: Short org name PRIMARY_HOST: www.example.org PROJECTS_AUTO_CREATE: false PROJECTS_ENABLED: true SECRET_KEY: [KEY] SEND_MESSAGES: true SERVER_EMAIL: app@apply.example.org Optional: ANYMAIL_WEBHOOK_SECRET: [KEY] AWS_ACCESS_KEY_ID: [KEY] AWS_DEFAULT_ACL: None AWS_MIGRATION_ACCESS_KEY_ID: [KEY] AWS_MIGRATION_BUCKET_NAME: backup.example.org AWS_MIGRATION_SECRET_ACCESS_KEY: [KEY] AWS_PRIVATE_BUCKET_NAME: private.example.org AWS_PUBLIC_BUCKET_NAME: public.example.org AWS_PUBLIC_CUSTOM_DOMAIN: public.example.org AWS_QUERYSTRING_EXPIRE: 600 AWS_SECRET_ACCESS_KEY: [KEY] AWS_STORAGE_BUCKET_NAME: public.example.org BASIC_AUTH_ENABLED: true BASIC_AUTH_LOGIN: [USER] BASIC_AUTH_PASSWORD: [PASS] BASIC_AUTH_WHITELISTED_HTTP_HOSTS: www.example.org,apply.example.org CLOUDFLARE_API_ZONEID: [KEY] CLOUDFLARE_BEARER_TOKEN: [KEY] MAILCHIMP_API_KEY: [KEY]-us10 MAILCHIMP_LIST_ID: [ID] MAILGUN_API_KEY: [KEY] SEND_READY_FOR_REVIEW: false SLACK_DESTINATION_ROOM: #notify SLACK_DESTINATION_ROOM_COMMENTS: #notes SLACK_DESTINATION_URL: https://slackbot-example.org/incoming/[KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: [KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: [KEY] SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS: example.org","title":"settings"},{"location":"contributing/","text":"\ud83d\ude4b Want to Contribute? \u00b6 First off, thanks for taking the time to contribute! Hypha is improved by a small community of developers, designers and users. We welcome your contributions. There are many ways to contribute to Hypha - code, design, documentation and translation. Before you start working however, please read our code of conduct . Code \u00b6 Found a bug and know how to fix it? Built a new feature you want to add? Please learn more about how to contribute code . Documentation \u00b6 The Hypha Guide welcomes contributors! Contribute to documentation by reviewing the guide and giving feedback, revising existing content, or sharing new content. Localization/Translation \u00b6 Hypha has functionalities for adopters to localize their own version with Weblate or install another translation service if they prefer. Reporting issues \u00b6 All changes in Hypha start as an issue. Pick an issue template from the options given (bug report, feature request etc.). These templates will guide you. Provide as much information as possible. If you have a usability, or UX design recommendation, you can open a Github issue and use the \"Status: Needs UX/UI Review\" label. \u00b6","title":"\ud83d\ude4b Want to Contribute?"},{"location":"contributing/#want-to-contribute","text":"First off, thanks for taking the time to contribute! Hypha is improved by a small community of developers, designers and users. We welcome your contributions. There are many ways to contribute to Hypha - code, design, documentation and translation. Before you start working however, please read our code of conduct .","title":"\ud83d\ude4b Want to Contribute?"},{"location":"contributing/#code","text":"Found a bug and know how to fix it? Built a new feature you want to add? Please learn more about how to contribute code .","title":"Code"},{"location":"contributing/#documentation","text":"The Hypha Guide welcomes contributors! Contribute to documentation by reviewing the guide and giving feedback, revising existing content, or sharing new content.","title":"Documentation"},{"location":"contributing/#localizationtranslation","text":"Hypha has functionalities for adopters to localize their own version with Weblate or install another translation service if they prefer.","title":"Localization/Translation"},{"location":"contributing/#reporting-issues","text":"All changes in Hypha start as an issue. Pick an issue template from the options given (bug report, feature request etc.). These templates will guide you. Provide as much information as possible. If you have a usability, or UX design recommendation, you can open a Github issue and use the \"Status: Needs UX/UI Review\" label.","title":"Reporting issues"},{"location":"contributing/#_1","text":"","title":""},{"location":"contributing/codeofconduct/","text":"Code of Conduct \u00b6 Our Pledge \u00b6 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00b6 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00b6 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00b6 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@opentech.fund and/or hello@reset.tech . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/\u00bc/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"contributing/codeofconduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"contributing/codeofconduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"contributing/codeofconduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/codeofconduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"contributing/codeofconduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"contributing/codeofconduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@opentech.fund and/or hello@reset.tech . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"contributing/codeofconduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/\u00bc/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/contribute-to-documentation/","text":"Contribute to Documentation \u00b6 Most of the work on the Hypha User Guide takes place on the project\u2019s GitHub repository . To get started, check out the list of open issues and pull requests. By contributing to the Hypha User Guide, you\u2019re expected to follow the Code of Conduct . The Hypha Guide welcomes contributors! There are lots of ways to help out, including: Reading the guide and giving feedback Reviewing new contributions Revising existing content Writing new content Translate the guide Documentation types \u00b6 This project consists of several distinct documentation types with specific purposes. When proposing new additions to the project please pick the appropriate documentation type. Developer \u00b6 Provides step-by-step information on how to set up a local instance of Hypha. User Guides \u00b6 Guides are focused on accomplishing a specific task and can assume some level of prerequisite knowledge. There may be multiple approaches to accomplishing a task, and we welcome your input. Other adopters like the Digital Freedom Fund and Open Technology Fund have created platform guides specific to their application processes. Discussions \u00b6 Discussions are focused on understanding and information exchange. These explore a specific topic without a specific goal in mind. https://we.hypha.app/","title":"Contribute to Documentation"},{"location":"contributing/contribute-to-documentation/#contribute-to-documentation","text":"Most of the work on the Hypha User Guide takes place on the project\u2019s GitHub repository . To get started, check out the list of open issues and pull requests. By contributing to the Hypha User Guide, you\u2019re expected to follow the Code of Conduct . The Hypha Guide welcomes contributors! There are lots of ways to help out, including: Reading the guide and giving feedback Reviewing new contributions Revising existing content Writing new content Translate the guide","title":"Contribute to Documentation"},{"location":"contributing/contribute-to-documentation/#documentation-types","text":"This project consists of several distinct documentation types with specific purposes. When proposing new additions to the project please pick the appropriate documentation type.","title":"Documentation types"},{"location":"contributing/contribute-to-documentation/#developer","text":"Provides step-by-step information on how to set up a local instance of Hypha.","title":"Developer"},{"location":"contributing/contribute-to-documentation/#user-guides","text":"Guides are focused on accomplishing a specific task and can assume some level of prerequisite knowledge. There may be multiple approaches to accomplishing a task, and we welcome your input. Other adopters like the Digital Freedom Fund and Open Technology Fund have created platform guides specific to their application processes.","title":"User Guides"},{"location":"contributing/contribute-to-documentation/#discussions","text":"Discussions are focused on understanding and information exchange. These explore a specific topic without a specific goal in mind. https://we.hypha.app/","title":"Discussions"},{"location":"contributing/code/","text":"Contribute Code \u00b6 Creating Pull Requests \u00b6 Found a bug and know how to fix it? Have some design wireframes to improve some usability issues? Traslated Hypha into another language? Built a new feature you want to add? Please submit an issue or create a pull request on GitHub . Guidance for contributing code: Submitting Changes Implementation Details How to run tests on Hypha","title":"Contribute Code"},{"location":"contributing/code/#contribute-code","text":"","title":"Contribute Code"},{"location":"contributing/code/#creating-pull-requests","text":"Found a bug and know how to fix it? Have some design wireframes to improve some usability issues? Traslated Hypha into another language? Built a new feature you want to add? Please submit an issue or create a pull request on GitHub . Guidance for contributing code: Submitting Changes Implementation Details How to run tests on Hypha","title":"Creating Pull Requests"},{"location":"contributing/code/implementationdetails/","text":"Implementation Details \u00b6 Media \u00b6 Media is encouraged to be split into two distinct storage locations. A Public and a Private location, applicant media should exist only in the Private location. This is for two reasons: This separates the site media, which is served publicly with no authentication, from the Applicant media, which has permissions checks, it reduces the risk of a miss-configured storage exposing the Applicant data. Maintains separation between the two halves of the platform, Apply and Public. Media should also be served from a view that inherits from the PrivateMediaView which will confirm that the file isn't made public and can be configured to return the file object from an authenticated view. Public site \u00b6 Security \u00b6 The Public site is intended to be a heavily cached public site with no behaviour that requires authentication, excluding the Wagtail Admin. The ultimate aim would be to serve this site statically. Coupling \u00b6 The coupling between the Public and Apply sites has been done in such as way as to minimise the interaction between the two sites and facilitate a means of separation should the need arise. Their relationship is defined in the Public fund models: BaseApplicationPage.application_type LabPage.lab_type Data: Public to Apply \u00b6 The public site relies on the apply site to provide information on the related round status, open or closed and any closing dates for the round. The majority of this is within the apply cta . Removing the database relationship and exposing the required data over an API would be all thats required to split the two sites. Data: Apply to Public \u00b6 The application_public and lab_public relations are then exposed on the application models through the detail attribute which is used to provide a link back to the public page in a few locations. References to these attributes should be kept to a minimum and could be replaced with a URL field to achieve seperation of Public and Apply portions of the project. URL configuration \u00b6 The two site have different url configurations, this limits the Apply site to a subset of the urls in the project. This is configured as part of the middleware stack using apply_url_conf_middleware . This swaps out the url configuration based on the site homepage configured in the wagtail admin. The default url configuration is for the Public site which are shared by the Public and Apply sites. The Public site has access to the \"public authentication\" urls, this enables reverse lookup of the url in templates, such as the login button , but the user is redirected to the apply site. Visiting https:///login will present a login screen.","title":"Implementation Details"},{"location":"contributing/code/implementationdetails/#implementation-details","text":"","title":"Implementation Details"},{"location":"contributing/code/implementationdetails/#media","text":"Media is encouraged to be split into two distinct storage locations. A Public and a Private location, applicant media should exist only in the Private location. This is for two reasons: This separates the site media, which is served publicly with no authentication, from the Applicant media, which has permissions checks, it reduces the risk of a miss-configured storage exposing the Applicant data. Maintains separation between the two halves of the platform, Apply and Public. Media should also be served from a view that inherits from the PrivateMediaView which will confirm that the file isn't made public and can be configured to return the file object from an authenticated view.","title":"Media"},{"location":"contributing/code/implementationdetails/#public-site","text":"","title":"Public site"},{"location":"contributing/code/implementationdetails/#security","text":"The Public site is intended to be a heavily cached public site with no behaviour that requires authentication, excluding the Wagtail Admin. The ultimate aim would be to serve this site statically.","title":"Security"},{"location":"contributing/code/implementationdetails/#coupling","text":"The coupling between the Public and Apply sites has been done in such as way as to minimise the interaction between the two sites and facilitate a means of separation should the need arise. Their relationship is defined in the Public fund models: BaseApplicationPage.application_type LabPage.lab_type","title":"Coupling"},{"location":"contributing/code/implementationdetails/#data-public-to-apply","text":"The public site relies on the apply site to provide information on the related round status, open or closed and any closing dates for the round. The majority of this is within the apply cta . Removing the database relationship and exposing the required data over an API would be all thats required to split the two sites.","title":"Data: Public to Apply"},{"location":"contributing/code/implementationdetails/#data-apply-to-public","text":"The application_public and lab_public relations are then exposed on the application models through the detail attribute which is used to provide a link back to the public page in a few locations. References to these attributes should be kept to a minimum and could be replaced with a URL field to achieve seperation of Public and Apply portions of the project.","title":"Data: Apply to Public"},{"location":"contributing/code/implementationdetails/#url-configuration","text":"The two site have different url configurations, this limits the Apply site to a subset of the urls in the project. This is configured as part of the middleware stack using apply_url_conf_middleware . This swaps out the url configuration based on the site homepage configured in the wagtail admin. The default url configuration is for the Public site which are shared by the Public and Apply sites. The Public site has access to the \"public authentication\" urls, this enables reverse lookup of the url in templates, such as the login button , but the user is redirected to the apply site. Visiting https:///login will present a login screen.","title":"URL configuration"},{"location":"contributing/code/submittingchanges/","text":"Submitting Changes \u00b6 We use pull requests for all changes. No commits are done directly in to the main branches. The \"master\" branch is protected and only maintainers can merge to it. 1. Use descriptive branch names \u00b6 We commonly use fix/*, enhancement/*, feature/* bug/* and updates/* as base for the branch names. A good idea is to include the GitHub issue number in the format \"*/gh-1234-*\". 2. Use descriptive commit messages \u00b6 Write it so other developers, and your future self, can understand what was changes and why. 3. Rebase your branch before creating the PR \u00b6 A rebase makes sure the PR is up to date and has no merge conflicts. Please do a rebase and not just a merge, this gives a clean and readable commit history. 4. Link the PR to the corresponding issue \u00b6 A common way is to add \"Fixes #1234\" at the top of the PR description. See Linking a pull request to an issue 5. Add a reviewer \u00b6 If noting else has been agreed upon add Fredrik Jonsson @frjo . Git command examples \u00b6 Creating a new branch from master \u00b6 First check out master and do a git pull ot get all the latest updates. Then create a new branch and do a checkout of it. $ git checkout master $ git pull $ git checkout -b fix/gh-1234-fixing-thing-a Adding commits \u00b6 $ git add $ git commit -m \"A good commit message.\" Pushing branch first time to GitHub \u00b6 First make sure we are in the correct branch. Then push the branch to origin, i.e. GitHub in this case. Pushing to HEAD is equivalent to pushing to a remote branch having the same name as your current branch. Pushing to HEAD is equivalent to pushing to a remote branch having the same name as your current branch. $ git checkout fix/gh-1234-fixing-thing-a $ git push -u origin HEAD The message in the Terminal will contain the URL to create an PR. On most systems you can Command/CTRL click that to open it directly in your default browser. Rebase branch if needed \u00b6 Checkout master and update it. Checkout the branch you are working on and issue the command to rebase it from master. If that resulted in any changes you will then need to do a force push to GitHub. $ git checkout master $ git pull $ git checkout fix/gh-1234-fixing-thing-a $ git rebase master $ git push --force Read more about Git rebase . Thanks for wanting to help make Hypha better!","title":"Submitting Changes"},{"location":"contributing/code/submittingchanges/#submitting-changes","text":"We use pull requests for all changes. No commits are done directly in to the main branches. The \"master\" branch is protected and only maintainers can merge to it.","title":"Submitting Changes"},{"location":"contributing/code/submittingchanges/#1-use-descriptive-branch-names","text":"We commonly use fix/*, enhancement/*, feature/* bug/* and updates/* as base for the branch names. A good idea is to include the GitHub issue number in the format \"*/gh-1234-*\".","title":"1. Use descriptive branch names"},{"location":"contributing/code/submittingchanges/#2-use-descriptive-commit-messages","text":"Write it so other developers, and your future self, can understand what was changes and why.","title":"2. Use descriptive commit messages"},{"location":"contributing/code/submittingchanges/#3-rebase-your-branch-before-creating-the-pr","text":"A rebase makes sure the PR is up to date and has no merge conflicts. Please do a rebase and not just a merge, this gives a clean and readable commit history.","title":"3. Rebase your branch before creating the PR"},{"location":"contributing/code/submittingchanges/#4-link-the-pr-to-the-corresponding-issue","text":"A common way is to add \"Fixes #1234\" at the top of the PR description. See Linking a pull request to an issue","title":"4. Link the PR to the corresponding issue"},{"location":"contributing/code/submittingchanges/#5-add-a-reviewer","text":"If noting else has been agreed upon add Fredrik Jonsson @frjo .","title":"5. Add a reviewer"},{"location":"contributing/code/submittingchanges/#git-command-examples","text":"","title":"Git command examples"},{"location":"contributing/code/submittingchanges/#creating-a-new-branch-from-master","text":"First check out master and do a git pull ot get all the latest updates. Then create a new branch and do a checkout of it. $ git checkout master $ git pull $ git checkout -b fix/gh-1234-fixing-thing-a","title":"Creating a new branch from master"},{"location":"contributing/code/submittingchanges/#adding-commits","text":"$ git add $ git commit -m \"A good commit message.\"","title":"Adding commits"},{"location":"contributing/code/submittingchanges/#pushing-branch-first-time-to-github","text":"First make sure we are in the correct branch. Then push the branch to origin, i.e. GitHub in this case. Pushing to HEAD is equivalent to pushing to a remote branch having the same name as your current branch. Pushing to HEAD is equivalent to pushing to a remote branch having the same name as your current branch. $ git checkout fix/gh-1234-fixing-thing-a $ git push -u origin HEAD The message in the Terminal will contain the URL to create an PR. On most systems you can Command/CTRL click that to open it directly in your default browser.","title":"Pushing branch first time to GitHub"},{"location":"contributing/code/submittingchanges/#rebase-branch-if-needed","text":"Checkout master and update it. Checkout the branch you are working on and issue the command to rebase it from master. If that resulted in any changes you will then need to do a force push to GitHub. $ git checkout master $ git pull $ git checkout fix/gh-1234-fixing-thing-a $ git rebase master $ git push --force Read more about Git rebase . Thanks for wanting to help make Hypha better!","title":"Rebase branch if needed"},{"location":"contributing/code/testing/","text":"Testing \u00b6 Test Class Helpers \u00b6 BaseViewTestCase provides a useful framework for testing views. It handles the setup of requests and simplifies common url operations for views in the same installed app. Reversing URLS \u00b6 Due to the way the urls are configured , tests for the Apply site will fail as the Apply site does not use the default URL config. This can be resolved on a per testcase basis using the following: from django.test import TestCase , override_settings @override_settings ( ROOT_URLCONF = 'hypha.apply.urls' ) class MyTestCase ( TestCase ): pass This is implemented by default for the BaseViewTestCase","title":"Testing"},{"location":"contributing/code/testing/#testing","text":"","title":"Testing"},{"location":"contributing/code/testing/#test-class-helpers","text":"BaseViewTestCase provides a useful framework for testing views. It handles the setup of requests and simplifies common url operations for views in the same installed app.","title":"Test Class Helpers"},{"location":"contributing/code/testing/#reversing-urls","text":"Due to the way the urls are configured , tests for the Apply site will fail as the Apply site does not use the default URL config. This can be resolved on a per testcase basis using the following: from django.test import TestCase , override_settings @override_settings ( ROOT_URLCONF = 'hypha.apply.urls' ) class MyTestCase ( TestCase ): pass This is implemented by default for the BaseViewTestCase","title":"Reversing URLS"},{"location":"developers/createusers/","text":"Create a new User \u00b6 The First User ( for Developers ): \u00b6 The first user account is created when you install Hypha with this command: python manage.py createsuperuser The user created is an \"administrator\" role, a default Django role that bypasses any access restrictions, like 'root' on a Unix server. This role should only be used by the person implementing/deploying Hypha for your organization, who may be part of the organization or may be an external contractor. Creating additional users \u00b6 Creating additional users and assigning them Roles is done in Wagtail by someone with the Staff role. \u2139\ufe0f Only users with the \"Staff\" Role can do this 1. From the Dashboard, click the \"Apply admin\" button \u00b6 [insert Sandbox_dashboard_Staff img here] This takes you to the Wagtail dashboard (pictured below). 2. Click on \"Settings\" in the menu on the left side of the screen \u00b6 This will bring up another sub-menu 3. Click \"Users\" within the \"Settings\" menu \u00b6 Takes you to the Create Users page, which has two tabs (CALLED WHAT?) 4. Add user info (Name and contact) \u00b6 In the [NAME] Tab, add the user's name and contact email address 5. Select user Roles \u00b6 In the [Roles] tab, specify the level of access you want your user to have by giving them specific Roles (see Roles documentation for more information) 6. Finish by clicking a button, I'm sure (just have to look again to remember what it's called) \u00b6 Reporting Issues \u26a0\ufe0f If you notice errors on this page, or would like to see content added, please: post on we.hypha.app OR post a \"New Issue\" on the Hypha documentation Github page . Make sure to include a link to this page in your post .","title":"Create a new User"},{"location":"developers/createusers/#create-a-new-user","text":"","title":"Create a new User"},{"location":"developers/createusers/#the-first-user-for-developers","text":"The first user account is created when you install Hypha with this command: python manage.py createsuperuser The user created is an \"administrator\" role, a default Django role that bypasses any access restrictions, like 'root' on a Unix server. This role should only be used by the person implementing/deploying Hypha for your organization, who may be part of the organization or may be an external contractor.","title":"The First User (for Developers):"},{"location":"developers/createusers/#creating-additional-users","text":"Creating additional users and assigning them Roles is done in Wagtail by someone with the Staff role. \u2139\ufe0f Only users with the \"Staff\" Role can do this","title":"Creating additional users"},{"location":"developers/createusers/#1-from-the-dashboard-click-the-apply-admin-button","text":"[insert Sandbox_dashboard_Staff img here] This takes you to the Wagtail dashboard (pictured below).","title":"1. From the Dashboard, click the \"Apply admin\" button"},{"location":"developers/createusers/#2-click-on-settings-in-the-menu-on-the-left-side-of-the-screen","text":"This will bring up another sub-menu","title":"2. Click on \"Settings\" in the menu on the left side of the screen"},{"location":"developers/createusers/#3-click-users-within-the-settings-menu","text":"Takes you to the Create Users page, which has two tabs (CALLED WHAT?)","title":"3. Click \"Users\" within the \"Settings\" menu"},{"location":"developers/createusers/#4-add-user-info-name-and-contact","text":"In the [NAME] Tab, add the user's name and contact email address","title":"4. Add user info (Name and contact)"},{"location":"developers/createusers/#5-select-user-roles","text":"In the [Roles] tab, specify the level of access you want your user to have by giving them specific Roles (see Roles documentation for more information)","title":"5. Select user Roles"},{"location":"developers/createusers/#6-finish-by-clicking-a-button-im-sure-just-have-to-look-again-to-remember-what-its-called","text":"Reporting Issues \u26a0\ufe0f If you notice errors on this page, or would like to see content added, please: post on we.hypha.app OR post a \"New Issue\" on the Hypha documentation Github page . Make sure to include a link to this page in your post .","title":"6. Finish by clicking a button, I'm sure (just have to look again to remember what it's called)"},{"location":"developers/localdeveldocker/","text":"Local Development with Docker \u00b6 Require most recent version of Docker . Domains for local development \u00b6 You will need two domain to run this app. One for the public site and one for the apply site. Add this to your /etc/hosts file. 127.0.0.1 hypha.test 127.0.0.1 apply.hypha.test The \" test \" TLD is safe to use, it's reserved for testing purposes. OBS! All examples from now on will use the hypha.test domains. Get the code \u00b6 $ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha Create media directory \u00b6 In production media is stored on AWS S3 but for local development you need a \"media\" directory. $ mkdir media Docker \u00b6 Build the Docker images \u00b6 Run the docker compose command to build the images. This will take some time. If you need to rebuild the images to get a later version just run the \"build\" again. $ docker-compose --file docker/docker-compose.yaml build The build command needs to be run from Hypha root so it can copy needed files. The other commands are easier to run directly from the \"docker\" sub directory. Start the docker environment \u00b6 Move to the \"docker\" directory. $ cd docker To start the docker containers you use the \"up\" command. This command you will use each time you want to start up and use this docker environment. $ docker-compose up Access the docker environment \u00b6 Go to http://hypha.test:8090/ Run commands in the docker environment \u00b6 To get bash shell on the container that runs the Django app, use this command. docker-compose exec py bash Here you can issue django commands as normal. You might want to change the user - the default is circleci, but most of the code is owned by the user 'node'. To do that: docker-compose exec -u node py bash To get a shell on the container that runs Postgres, use this command. docker-compose exec db bash Stop the docker environment. \u00b6 Press ctrl+c in the terminal window. Restore a database dump in Docker \u00b6 We will use the \"public/sandbox_db.dump\" for this example. That is a good start in any case, you get some example content etc. First get a shell on the db container. docker-compose exec db bash Then in that shell you need to install wget to download the db dump. apt update apt install wget Then download the sandbox db dump from Github. wget https://github.com/HyphaApp/hypha/raw/sandbox/public/sandbox_db.dump Before being able to work on this database, you have to drop and prevent any other connections to it. psql # REVOKE CONNECT ON DATABASE hypha FROM public; # SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'hypha'; # \\q With this done, drop and then create the hypha database and run the pg restore command like this. dropdb --user=hypha hypha createdb --user=hypha hypha pg_restore --verbose --clean --if-exists --no-acl --no-owner --dbname=hypha --username=hypha sandbox_db.dump After restoring the sandbox db run the migrate command inside the py container. docker-compose exec py bash python manage.py migrate","title":"Local Development with Docker"},{"location":"developers/localdeveldocker/#local-development-with-docker","text":"Require most recent version of Docker .","title":"Local Development with Docker"},{"location":"developers/localdeveldocker/#domains-for-local-development","text":"You will need two domain to run this app. One for the public site and one for the apply site. Add this to your /etc/hosts file. 127.0.0.1 hypha.test 127.0.0.1 apply.hypha.test The \" test \" TLD is safe to use, it's reserved for testing purposes. OBS! All examples from now on will use the hypha.test domains.","title":"Domains for local development"},{"location":"developers/localdeveldocker/#get-the-code","text":"$ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha","title":"Get the code"},{"location":"developers/localdeveldocker/#create-media-directory","text":"In production media is stored on AWS S3 but for local development you need a \"media\" directory. $ mkdir media","title":"Create media directory"},{"location":"developers/localdeveldocker/#docker","text":"","title":"Docker"},{"location":"developers/localdeveldocker/#build-the-docker-images","text":"Run the docker compose command to build the images. This will take some time. If you need to rebuild the images to get a later version just run the \"build\" again. $ docker-compose --file docker/docker-compose.yaml build The build command needs to be run from Hypha root so it can copy needed files. The other commands are easier to run directly from the \"docker\" sub directory.","title":"Build the Docker images"},{"location":"developers/localdeveldocker/#start-the-docker-environment","text":"Move to the \"docker\" directory. $ cd docker To start the docker containers you use the \"up\" command. This command you will use each time you want to start up and use this docker environment. $ docker-compose up","title":"Start the docker environment"},{"location":"developers/localdeveldocker/#access-the-docker-environment","text":"Go to http://hypha.test:8090/","title":"Access the docker environment"},{"location":"developers/localdeveldocker/#run-commands-in-the-docker-environment","text":"To get bash shell on the container that runs the Django app, use this command. docker-compose exec py bash Here you can issue django commands as normal. You might want to change the user - the default is circleci, but most of the code is owned by the user 'node'. To do that: docker-compose exec -u node py bash To get a shell on the container that runs Postgres, use this command. docker-compose exec db bash","title":"Run commands in the docker environment"},{"location":"developers/localdeveldocker/#stop-the-docker-environment","text":"Press ctrl+c in the terminal window.","title":"Stop the docker environment."},{"location":"developers/localdeveldocker/#restore-a-database-dump-in-docker","text":"We will use the \"public/sandbox_db.dump\" for this example. That is a good start in any case, you get some example content etc. First get a shell on the db container. docker-compose exec db bash Then in that shell you need to install wget to download the db dump. apt update apt install wget Then download the sandbox db dump from Github. wget https://github.com/HyphaApp/hypha/raw/sandbox/public/sandbox_db.dump Before being able to work on this database, you have to drop and prevent any other connections to it. psql # REVOKE CONNECT ON DATABASE hypha FROM public; # SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'hypha'; # \\q With this done, drop and then create the hypha database and run the pg restore command like this. dropdb --user=hypha hypha createdb --user=hypha hypha pg_restore --verbose --clean --if-exists --no-acl --no-owner --dbname=hypha --username=hypha sandbox_db.dump After restoring the sandbox db run the migrate command inside the py container. docker-compose exec py bash python manage.py migrate","title":"Restore a database dump in Docker"},{"location":"developers/localdevelscratch/","text":"Local Development from Scratch \u00b6 Requirements \u00b6 Make sure you have these things installed on your system: Git Python 3.9.x python3-venv to setup virtual enviroment to setup virtual enviroment python3-pip to install python packages to install python packages PostgreSQL 12.x libpq-dev on Linux at least on Linux at least Apache or Nginx Node 16.x On Linux install them with your normal package manager. On macOS Homebrew is an excellent option. For Windows Chocolatey seems popular but we have no experience with Windows. Domains for local development \u00b6 You will need two domain to run this app. One for the public site and one for the apply site. Add this to your /etc/hosts file. Feel free to use another name but then remember to use it in all the commands below. Feel free to use another name but then remember to use it in all the commands below. 127.0.0.1 hypha.test 127.0.0.1 apply.hypha.test The \" test \" TLD is safe to use, it's reserved for testing purposes. OBS! All examples from now on will use the hypha.test domains. Get the code \u00b6 $ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha Create media directory \u00b6 In production media is stored on AWS S3 but for local development you need a \"media\" directory. $ mkdir media OBS! Everything from now on will happen inside the hypha directory. Python virtual environment \u00b6 Create the virtual environment, specify the python binary to use and the directory. Then source the activate script to activate the virtual environment. The last line tells Django what settings to use. $ python3 -m venv venv/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev Inside your activated virtual environment you will use plain python and pip commands. Everything inside the virtual environment is python 3 since we specified that when we created it. Each time you open up a new shell to work with the app you will need to activate the virtual environment. $ cd /path/to/application/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev Install Python packages \u00b6 All the needed python packages for production are listed in the requirements.txt file. Additional packages for development are listed in requirements-dev.txt , it also includes everything from the requirements.txt file. For a development environment you then run: $ pip install -r requirements-dev.txt If any requirements*.txt file have been updated you will need to rerun this command to get the updated/added packages. Note for macOS users: If pip does not want to build \"psycopg2\" you need to add openssl to your \"LIBRARY_PATH\". Assuming you have openssl installed with homebrew the following should work. $ export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/ Install Node packages \u00b6 All the needed Node packages are listed in package.json . Install them with this command. $ npm install The Postgres database \u00b6 If the createdb and dropdb is not available you will need to add the Postgres bin directory to your path or call the commands with complete path. Create a database for the app. $ createdb hypha To drop a database use. $ dropdb hypha Linux installs might require setting up a user \u00b6 On Linux you might need to run as the \"postgres\" user first when setting up Postgres. Use it to create the database and set up a database user. For local development I suggest creating a user with the same name as your account, then you will not need to specify it on every command. $ su - postgres $ createdb hypha $ createuser [your-account-name] macOS users might need this fix \u00b6 To make the app find the Postgres socket you might need to update the \"unix_socket_directories\" setting in the postgresql.conf file. unix_socket_directories = '/tmp, /var/pgsql_socket' Use stellar for db snapshots \u00b6 If you installed \"stellar\" you can use it to take snapshots and restore them. $ stellar snapshot hypha_2019-10-01 $ stellar restore hypha_2019-10-01 Local settings \u00b6 On production it's recommended to use environment variables for all settings. For local development putting them in a file is however convenient. When you use the \"dev\" settings it will included all the setting you put in local.py . Copy the local settings example file. $ cp -p hypha/settings/local.py.example hypha/settings/local.py (It is also possible to use a local .env file since Hypha use the environs package.) You most likely want to set these: ALLOWED_HOSTS BASE_URL SECRET_KEY If you have a problem with \"CSRF cookie not set\". CSRF_COOKIE_SAMESITE = None SESSION_COOKIE_SAMESITE = None If you do not use the app name for the database. import dj_database_url DATABASES = { 'default': dj_database_url.config( conn_max_age=600, default='postgres:///your_db_name' ) } Create log directory \u00b6 mkdir -p var/log/ Set up Gunicorn \u00b6 Gunicorn is installed inside the virtual environment since it's listed in requirements.txt . At the bottom of this file you find a handy script for Gunicorn. For a quick test you can run this command from your site directory. $ gunicorn hypha.wsgi:application --env DJANGO_SETTINGS_MODULE=hypha.settings.dev --bind 127.0.0.1:9001 Quit the server with ctrl-c when you done testing. hypha.wsgi:application links it up to the app via the hypha/wsgi.py file. --env \u2026 tells it what settings to use, for development your want \"dev\" settings. --bind \u2026 makes it listen on localhost port 9001. Socket works as well but on macOS they have given me issues, while tcp connections always seems to just work. Set up Apache or Nginx \u00b6 Set up new vhost for Apache or Nginx. We let the web server handle static files and proxy everything else over to Gunicorn. The examples uses port 80 for web server and port 9001 for WSGI, feel free to change that if needed. You maybe are already running other services on these ports or prefer to not run the web server as root and want a port above 1024. Apache \u00b6 <VirtualHost 127.0.0.1:80> ServerName hypha.test ServerAlias apply.hypha.test DocumentRoot \"/path/to/application/hypha/hypha\" Alias /media/ /path/to/application/hypha/media/ Alias /static/ /path/to/application/hypha/static/ Alias /static_src/ /path/to/application/hypha/hypha/static_src/ <Directory \"/path/to/application/hypha/static\"> Require all granted </Directory> <Directory \"/path/to/application/hypha/media\"> Require all granted </Directory> <Directory \"/path/to/application/hypha/hypha/static_src\"> Require all granted </Directory> <IfModule mod_proxy_http.c> <Location \"/\"> ProxyPreserveHost On ProxyPass http://127.0.0.1:9001/ ProxyPassReverse http://127.0.0.1:9001/ </Location> <LocationMatch \"^/(static|media|static_src)/\"> ProxyPass ! </LocationMatch> <LocationMatch \"^/[\\w-]+\\.(ico|json|png|txt)$\"> ProxyPass ! </LocationMatch> </IfModule> </VirtualHost> Nginx \u00b6 server { listen 80; server_name hypha.test apply.hypha.test; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://127.0.0.1:9001/; } } Front end development \u00b6 See the package.json file for a complete list of commands. Here are the most common in development. This will watch all sass and js files for changes and build them with css maps. It will also run the \"collecstatic\" command, useful when running the site with a production server and not the built in dev server. $ npm run watch To build all assets for development use this command. $ npm run dev:build If you are working on the React components you also need to set \"API_BASE_URL\" to the correct value. $ export API_BASE_URL='http://apply.hypha.test/api' To build the assets which get deployed, use the following. The deployment scripts will handle this, and the files should not be committed. $ npm run build Finally, the app itself \u00b6 Start by specifying what settings file is to be used if you have not already done this, see above if you have not already done this, see above . $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev Then decide if you want to start with some demo content or with an empty db. Load the sandbox db to get some demo content \u00b6 There is a /public/sandbox_db.dump file that has some demo content to get you started. Load it in with this command. $ pg_restore --verbose --clean --if-exists --no-acl --no-owner --dbname=hypha public/sandbox_db.dump It's not always completely up to date so run: $ python manage.py migrate --noinput Or create a db from scratch. \u00b6 Create the cache tables. $ python manage.py createcachetable Run all migrations to set up the database tables. $ python manage.py migrate --noinput Create the first super user. $ python manage.py createsuperuser Collect all the static files. $ python manage.py collectstatic --noinput --settings=hypha.settings.dev (If this command complain about missing static_compiled directory, run the npm run dev:build command above first.) Set the addresses and ports of the two wagtail sites. $ python manage.py wagtailsiteupdate hypha.test apply.hypha.test 80 Now you should be able to access the sites on http://hypha.test/ and http://apply.hypha.test/ Run tests \u00b6 Hypha has specific settings for testing so specify them when you run the \"test\" command. $ python manage.py test --settings=hypha.settings.test If you need to rerun the tests several times this will speed them up considerably. $ python manage.py test --parallel --keepdb --settings=hypha.settings.test Administration \u00b6 The Apply dashboard: http://apply.hypha.test/dashboard/ The Apply Wagtail admin: http://apply.hypha.test/admin/ The Django Administration panel: http://apply.hypha.test/django-admin/ Use the email address and password you set in the createsuperuser step above to login. Useful things \u00b6 Script to start/stop/restart gunicorn: #!/usr/bin/env bash set -euo pipefail WORKERS = 3 PORT = ${ 2 :- 9001 } WSGI = $( find . -name wsgi.py -not -path \"./venv/*\" ) WSGI = ${ WSGI %/* } NAME = ${ WSGI ##*/ } SETTINGS = \" ${ NAME } .settings. ${ 3 :- dev } \" RUNDIR = \"./var/run\" LOGDIR = \"./var/log\" SOCK = \" ${ RUNDIR } / ${ NAME } -gunicorn.sock\" PID = \" ${ RUNDIR } / ${ NAME } -gunicorn.pid\" LOGFILE = \" ${ LOGDIR } / ${ NAME } -gunicorn.log\" function start_gunicorn { if [[ ! -d \" ${ RUNDIR } \" ]] ; then mkdir -p \" ${ RUNDIR } \" else rm -rf \" ${ RUNDIR } / ${ NAME } *\" fi if [[ ! -d \" ${ LOGDIR } \" ]] ; then mkdir -p \" ${ LOGDIR } \" fi exec gunicorn \\ ${ NAME } .wsgi:application \\ --env DJANGO_SETTINGS_MODULE = ${ SETTINGS } \\ --pid ${ PID } \\ --bind 127 .0.0.1: ${ PORT } \\ --workers ${ WORKERS } \\ --name ${ NAME } \\ --daemon \\ --reload \\ --log-file = ${ LOGFILE } \\ --log-level error echo \"Gunicorn started.\" } function stop_gunicorn { kill ` cat $PID ` echo \"Gunicorn stopped.\" } case $1 in start ) start_gunicorn ;; stop ) stop_gunicorn ;; restart ) stop_gunicorn start_gunicorn ;; * ) echo \"Not a recognised command, use start/stop/restart.\" ;; esac","title":"Local Development from Scratch"},{"location":"developers/localdevelscratch/#local-development-from-scratch","text":"","title":"Local Development from Scratch"},{"location":"developers/localdevelscratch/#requirements","text":"Make sure you have these things installed on your system: Git Python 3.9.x python3-venv to setup virtual enviroment to setup virtual enviroment python3-pip to install python packages to install python packages PostgreSQL 12.x libpq-dev on Linux at least on Linux at least Apache or Nginx Node 16.x On Linux install them with your normal package manager. On macOS Homebrew is an excellent option. For Windows Chocolatey seems popular but we have no experience with Windows.","title":"Requirements"},{"location":"developers/localdevelscratch/#domains-for-local-development","text":"You will need two domain to run this app. One for the public site and one for the apply site. Add this to your /etc/hosts file. Feel free to use another name but then remember to use it in all the commands below. Feel free to use another name but then remember to use it in all the commands below. 127.0.0.1 hypha.test 127.0.0.1 apply.hypha.test The \" test \" TLD is safe to use, it's reserved for testing purposes. OBS! All examples from now on will use the hypha.test domains.","title":"Domains for local development"},{"location":"developers/localdevelscratch/#get-the-code","text":"$ git clone https://github.com/HyphaApp/hypha.git hypha $ cd hypha","title":"Get the code"},{"location":"developers/localdevelscratch/#create-media-directory","text":"In production media is stored on AWS S3 but for local development you need a \"media\" directory. $ mkdir media OBS! Everything from now on will happen inside the hypha directory.","title":"Create media directory"},{"location":"developers/localdevelscratch/#python-virtual-environment","text":"Create the virtual environment, specify the python binary to use and the directory. Then source the activate script to activate the virtual environment. The last line tells Django what settings to use. $ python3 -m venv venv/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev Inside your activated virtual environment you will use plain python and pip commands. Everything inside the virtual environment is python 3 since we specified that when we created it. Each time you open up a new shell to work with the app you will need to activate the virtual environment. $ cd /path/to/application/hypha $ source venv/hypha/bin/activate $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev","title":"Python virtual environment"},{"location":"developers/localdevelscratch/#install-python-packages","text":"All the needed python packages for production are listed in the requirements.txt file. Additional packages for development are listed in requirements-dev.txt , it also includes everything from the requirements.txt file. For a development environment you then run: $ pip install -r requirements-dev.txt If any requirements*.txt file have been updated you will need to rerun this command to get the updated/added packages. Note for macOS users: If pip does not want to build \"psycopg2\" you need to add openssl to your \"LIBRARY_PATH\". Assuming you have openssl installed with homebrew the following should work. $ export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/opt/openssl/lib/","title":"Install Python packages"},{"location":"developers/localdevelscratch/#install-node-packages","text":"All the needed Node packages are listed in package.json . Install them with this command. $ npm install","title":"Install Node packages"},{"location":"developers/localdevelscratch/#the-postgres-database","text":"If the createdb and dropdb is not available you will need to add the Postgres bin directory to your path or call the commands with complete path. Create a database for the app. $ createdb hypha To drop a database use. $ dropdb hypha","title":"The Postgres database"},{"location":"developers/localdevelscratch/#linux-installs-might-require-setting-up-a-user","text":"On Linux you might need to run as the \"postgres\" user first when setting up Postgres. Use it to create the database and set up a database user. For local development I suggest creating a user with the same name as your account, then you will not need to specify it on every command. $ su - postgres $ createdb hypha $ createuser [your-account-name]","title":"Linux installs might require setting up a user"},{"location":"developers/localdevelscratch/#macos-users-might-need-this-fix","text":"To make the app find the Postgres socket you might need to update the \"unix_socket_directories\" setting in the postgresql.conf file. unix_socket_directories = '/tmp, /var/pgsql_socket'","title":"macOS users might need this fix"},{"location":"developers/localdevelscratch/#use-stellar-for-db-snapshots","text":"If you installed \"stellar\" you can use it to take snapshots and restore them. $ stellar snapshot hypha_2019-10-01 $ stellar restore hypha_2019-10-01","title":"Use stellar for db snapshots"},{"location":"developers/localdevelscratch/#local-settings","text":"On production it's recommended to use environment variables for all settings. For local development putting them in a file is however convenient. When you use the \"dev\" settings it will included all the setting you put in local.py . Copy the local settings example file. $ cp -p hypha/settings/local.py.example hypha/settings/local.py (It is also possible to use a local .env file since Hypha use the environs package.) You most likely want to set these: ALLOWED_HOSTS BASE_URL SECRET_KEY If you have a problem with \"CSRF cookie not set\". CSRF_COOKIE_SAMESITE = None SESSION_COOKIE_SAMESITE = None If you do not use the app name for the database. import dj_database_url DATABASES = { 'default': dj_database_url.config( conn_max_age=600, default='postgres:///your_db_name' ) }","title":"Local settings"},{"location":"developers/localdevelscratch/#create-log-directory","text":"mkdir -p var/log/","title":"Create log directory"},{"location":"developers/localdevelscratch/#set-up-gunicorn","text":"Gunicorn is installed inside the virtual environment since it's listed in requirements.txt . At the bottom of this file you find a handy script for Gunicorn. For a quick test you can run this command from your site directory. $ gunicorn hypha.wsgi:application --env DJANGO_SETTINGS_MODULE=hypha.settings.dev --bind 127.0.0.1:9001 Quit the server with ctrl-c when you done testing. hypha.wsgi:application links it up to the app via the hypha/wsgi.py file. --env \u2026 tells it what settings to use, for development your want \"dev\" settings. --bind \u2026 makes it listen on localhost port 9001. Socket works as well but on macOS they have given me issues, while tcp connections always seems to just work.","title":"Set up Gunicorn"},{"location":"developers/localdevelscratch/#set-up-apache-or-nginx","text":"Set up new vhost for Apache or Nginx. We let the web server handle static files and proxy everything else over to Gunicorn. The examples uses port 80 for web server and port 9001 for WSGI, feel free to change that if needed. You maybe are already running other services on these ports or prefer to not run the web server as root and want a port above 1024.","title":"Set up Apache or Nginx"},{"location":"developers/localdevelscratch/#apache","text":"<VirtualHost 127.0.0.1:80> ServerName hypha.test ServerAlias apply.hypha.test DocumentRoot \"/path/to/application/hypha/hypha\" Alias /media/ /path/to/application/hypha/media/ Alias /static/ /path/to/application/hypha/static/ Alias /static_src/ /path/to/application/hypha/hypha/static_src/ <Directory \"/path/to/application/hypha/static\"> Require all granted </Directory> <Directory \"/path/to/application/hypha/media\"> Require all granted </Directory> <Directory \"/path/to/application/hypha/hypha/static_src\"> Require all granted </Directory> <IfModule mod_proxy_http.c> <Location \"/\"> ProxyPreserveHost On ProxyPass http://127.0.0.1:9001/ ProxyPassReverse http://127.0.0.1:9001/ </Location> <LocationMatch \"^/(static|media|static_src)/\"> ProxyPass ! </LocationMatch> <LocationMatch \"^/[\\w-]+\\.(ico|json|png|txt)$\"> ProxyPass ! </LocationMatch> </IfModule> </VirtualHost>","title":"Apache"},{"location":"developers/localdevelscratch/#nginx","text":"server { listen 80; server_name hypha.test apply.hypha.test; location /media/ { alias /path/to/application/hypha/media/; } location /static/ { alias /path/to/application/hypha/static/; } location / { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://127.0.0.1:9001/; } }","title":"Nginx"},{"location":"developers/localdevelscratch/#front-end-development","text":"See the package.json file for a complete list of commands. Here are the most common in development. This will watch all sass and js files for changes and build them with css maps. It will also run the \"collecstatic\" command, useful when running the site with a production server and not the built in dev server. $ npm run watch To build all assets for development use this command. $ npm run dev:build If you are working on the React components you also need to set \"API_BASE_URL\" to the correct value. $ export API_BASE_URL='http://apply.hypha.test/api' To build the assets which get deployed, use the following. The deployment scripts will handle this, and the files should not be committed. $ npm run build","title":"Front end development"},{"location":"developers/localdevelscratch/#finally-the-app-itself","text":"Start by specifying what settings file is to be used if you have not already done this, see above if you have not already done this, see above . $ export DJANGO_SETTINGS_MODULE=hypha.settings.dev Then decide if you want to start with some demo content or with an empty db.","title":"Finally, the app itself"},{"location":"developers/localdevelscratch/#load-the-sandbox-db-to-get-some-demo-content","text":"There is a /public/sandbox_db.dump file that has some demo content to get you started. Load it in with this command. $ pg_restore --verbose --clean --if-exists --no-acl --no-owner --dbname=hypha public/sandbox_db.dump It's not always completely up to date so run: $ python manage.py migrate --noinput","title":"Load the sandbox db to get some demo content"},{"location":"developers/localdevelscratch/#or-create-a-db-from-scratch","text":"Create the cache tables. $ python manage.py createcachetable Run all migrations to set up the database tables. $ python manage.py migrate --noinput Create the first super user. $ python manage.py createsuperuser Collect all the static files. $ python manage.py collectstatic --noinput --settings=hypha.settings.dev (If this command complain about missing static_compiled directory, run the npm run dev:build command above first.) Set the addresses and ports of the two wagtail sites. $ python manage.py wagtailsiteupdate hypha.test apply.hypha.test 80 Now you should be able to access the sites on http://hypha.test/ and http://apply.hypha.test/","title":"Or create a db from scratch."},{"location":"developers/localdevelscratch/#run-tests","text":"Hypha has specific settings for testing so specify them when you run the \"test\" command. $ python manage.py test --settings=hypha.settings.test If you need to rerun the tests several times this will speed them up considerably. $ python manage.py test --parallel --keepdb --settings=hypha.settings.test","title":"Run tests"},{"location":"developers/localdevelscratch/#administration","text":"The Apply dashboard: http://apply.hypha.test/dashboard/ The Apply Wagtail admin: http://apply.hypha.test/admin/ The Django Administration panel: http://apply.hypha.test/django-admin/ Use the email address and password you set in the createsuperuser step above to login.","title":"Administration"},{"location":"developers/localdevelscratch/#useful-things","text":"Script to start/stop/restart gunicorn: #!/usr/bin/env bash set -euo pipefail WORKERS = 3 PORT = ${ 2 :- 9001 } WSGI = $( find . -name wsgi.py -not -path \"./venv/*\" ) WSGI = ${ WSGI %/* } NAME = ${ WSGI ##*/ } SETTINGS = \" ${ NAME } .settings. ${ 3 :- dev } \" RUNDIR = \"./var/run\" LOGDIR = \"./var/log\" SOCK = \" ${ RUNDIR } / ${ NAME } -gunicorn.sock\" PID = \" ${ RUNDIR } / ${ NAME } -gunicorn.pid\" LOGFILE = \" ${ LOGDIR } / ${ NAME } -gunicorn.log\" function start_gunicorn { if [[ ! -d \" ${ RUNDIR } \" ]] ; then mkdir -p \" ${ RUNDIR } \" else rm -rf \" ${ RUNDIR } / ${ NAME } *\" fi if [[ ! -d \" ${ LOGDIR } \" ]] ; then mkdir -p \" ${ LOGDIR } \" fi exec gunicorn \\ ${ NAME } .wsgi:application \\ --env DJANGO_SETTINGS_MODULE = ${ SETTINGS } \\ --pid ${ PID } \\ --bind 127 .0.0.1: ${ PORT } \\ --workers ${ WORKERS } \\ --name ${ NAME } \\ --daemon \\ --reload \\ --log-file = ${ LOGFILE } \\ --log-level error echo \"Gunicorn started.\" } function stop_gunicorn { kill ` cat $PID ` echo \"Gunicorn stopped.\" } case $1 in start ) start_gunicorn ;; stop ) stop_gunicorn ;; restart ) stop_gunicorn start_gunicorn ;; * ) echo \"Not a recognised command, use start/stop/restart.\" ;; esac","title":"Useful things"},{"location":"maintenance/","text":"Maintenance \u00b6","title":"Maintenance"},{"location":"maintenance/#maintenance","text":"","title":"Maintenance"},{"location":"staff/","text":"\ud83d\udc69 Usage Guide \u00b6 The examples in this document are based on Hypha's demo site . However, the instructions are general enough to be applicable to any Hypha site. User roles Create a user account Create your first application","title":"\ud83d\udc69 Usage Guide"},{"location":"staff/#usage-guide","text":"The examples in this document are based on Hypha's demo site . However, the instructions are general enough to be applicable to any Hypha site. User roles Create a user account Create your first application","title":"\ud83d\udc69 Usage Guide"},{"location":"staff/create-a-user-account/","text":"Create a user account \u00b6 In the WagTail Admin, you could create a new user account as well as assign a role to a user account by clicking on the \"Add User\" button on the far right-hand corner of the screen. You can also search for users in the search bar. The \"Add User\" form will request your email, name, and role within the platform. Selecting a role with enable to administrative access within the platform. Commonly used roles within the platform are Staff , Partner , and Reviewer .","title":"Create a user account"},{"location":"staff/create-a-user-account/#create-a-user-account","text":"In the WagTail Admin, you could create a new user account as well as assign a role to a user account by clicking on the \"Add User\" button on the far right-hand corner of the screen. You can also search for users in the search bar. The \"Add User\" form will request your email, name, and role within the platform. Selecting a role with enable to administrative access within the platform. Commonly used roles within the platform are Staff , Partner , and Reviewer .","title":"Create a user account"},{"location":"staff/localization-and-translation/","text":"Localization and Translation \u00b6 Overview \u00b6 Hypha offers translations into another language or translations into your organisation's vocabulary, or a combination of both. Hypha has functionalities for adopters to localize their own version with Weblate or install another translation service if they prefer. Translations could also be implemented with a text editor. Getting Started on Localization \u00b6 Translations of Hypha can be of two kinds. Translations in to another language or translations in to you organisations vocabulary, or a combination of both. Our team is currently using Weblate to manage translations of this project. Please visit Hypha's Weblate https://hosted.weblate.org/projects/hypha/ to start the translation process. You will need a Weblate account, and take it from there. Weblate instructions and related documentation on translation is a great introductory resource. project on Weblate to contribute. If you are experiencing issues while you are working on translations, please open an issue on [GitHub}. Adopters could also consider installing another translation service or apps for Linux/Windows/macOS po-files. In the How to Edit the .po file in hypha/locale we describe how translators can edit directly with a text editor. All translations will eventually be stored as django.po files. Adding a language \u00b6 If your language is not listed on packaging.python.org, click the button Start new translation at the bottom of the language list and add the language you want to translate. How to Edit the .po file in hypha/locale \u00b6 Hypha has translations to common strings propagated across other components within it by default. This lightens the burden of repetitive and multi version translation. The translation propagation can be disabled per Component configuration using Allow translation propagation in case the translations should diverge. Hypha's list of translatable strings is available here. In cases where text strings are not yet translatable, a quick method to find out would be search in the .po file here. As an Adopter you could also edit \u201chypha/locale/en\u201d and \u201chypha/locale/[your_lang_code]\u201d any way you like.","title":"Localization and Translation"},{"location":"staff/localization-and-translation/#localization-and-translation","text":"","title":"Localization and Translation"},{"location":"staff/localization-and-translation/#overview","text":"Hypha offers translations into another language or translations into your organisation's vocabulary, or a combination of both. Hypha has functionalities for adopters to localize their own version with Weblate or install another translation service if they prefer. Translations could also be implemented with a text editor.","title":"Overview"},{"location":"staff/localization-and-translation/#getting-started-on-localization","text":"Translations of Hypha can be of two kinds. Translations in to another language or translations in to you organisations vocabulary, or a combination of both. Our team is currently using Weblate to manage translations of this project. Please visit Hypha's Weblate https://hosted.weblate.org/projects/hypha/ to start the translation process. You will need a Weblate account, and take it from there. Weblate instructions and related documentation on translation is a great introductory resource. project on Weblate to contribute. If you are experiencing issues while you are working on translations, please open an issue on [GitHub}. Adopters could also consider installing another translation service or apps for Linux/Windows/macOS po-files. In the How to Edit the .po file in hypha/locale we describe how translators can edit directly with a text editor. All translations will eventually be stored as django.po files.","title":"Getting Started on Localization"},{"location":"staff/localization-and-translation/#adding-a-language","text":"If your language is not listed on packaging.python.org, click the button Start new translation at the bottom of the language list and add the language you want to translate.","title":"Adding a language"},{"location":"staff/localization-and-translation/#how-to-edit-the-po-file-in-hyphalocale","text":"Hypha has translations to common strings propagated across other components within it by default. This lightens the burden of repetitive and multi version translation. The translation propagation can be disabled per Component configuration using Allow translation propagation in case the translations should diverge. Hypha's list of translatable strings is available here. In cases where text strings are not yet translatable, a quick method to find out would be search in the .po file here. As an Adopter you could also edit \u201chypha/locale/en\u201d and \u201chypha/locale/[your_lang_code]\u201d any way you like.","title":"How to Edit the .po file in hypha/locale"},{"location":"staff/login/","text":"How to login \u00b6 Step 1 : Navigate to the organization's homepage \u00b6 Step 2 : Click the \"My [Organization Name]\" button in the upper-right corner of the screen \u00b6 Step 3 : Enter your credentials in the \"Email address\" and \"Password\" fields & click \"Login\" \u00b6","title":"How to login"},{"location":"staff/login/#how-to-login","text":"","title":"How to login"},{"location":"staff/login/#step-1-navigate-to-the-organizations-homepage","text":"","title":"Step 1: Navigate to the organization's homepage"},{"location":"staff/login/#step-2-click-the-my-organization-name-button-in-the-upper-right-corner-of-the-screen","text":"","title":"Step 2: Click the \"My [Organization Name]\" button in the upper-right corner of the screen"},{"location":"staff/login/#step-3-enter-your-credentials-in-the-email-address-and-password-fields-click-login","text":"","title":"Step 3: Enter your credentials in the \"Email address\" and \"Password\" fields &amp; click \"Login\""},{"location":"staff/set-up-your-first-application/","text":"\ud83c\udfd7 Your First Application \u00b6 Getting Started \u00b6 All admin actions associated with applications can be access through the \u201cApply\u201d menu. This is found in the left navigation of the admin area. Clicking on the \u201cApply\u201d menu item opens up the sub menu. Setting up a Form Setting up Funds and Labs Select a Workflow Setting up a Round In this guide menu elements will be referred to using \u201c[ ]\u201d to indicate the button and \u201c>\u201d to indicate a subsequent menu item.","title":"\ud83c\udfd7 Your First Application"},{"location":"staff/set-up-your-first-application/#your-first-application","text":"","title":"\ud83c\udfd7 Your First Application"},{"location":"staff/set-up-your-first-application/#getting-started","text":"All admin actions associated with applications can be access through the \u201cApply\u201d menu. This is found in the left navigation of the admin area. Clicking on the \u201cApply\u201d menu item opens up the sub menu. Setting up a Form Setting up Funds and Labs Select a Workflow Setting up a Round In this guide menu elements will be referred to using \u201c[ ]\u201d to indicate the button and \u201c>\u201d to indicate a subsequent menu item.","title":"Getting Started"},{"location":"staff/set-up-your-first-application/select-a-workflow/","text":"Select a Workflow \u00b6 The Workflow defines the stages and processes that the application should undertake with OTF. Creating a new Fund or Lab requires you to select one of these workflows. Each workflow has a predetermined amount of stages (e.g. request, proposal), application forms, review forms, and determination forms associated with this Fund or Lab. Each workflow offers different statuses (e.g. External Review, Ready for Determination), and different actions (e.g Invite to proposal). The four hard-coded workflows are: Request, Request with external review, Request with community review, Concept & Proposal. \ud83d\udc81 Request \u00b6 This application process requires less time and effort than the other workflow processes. This workflow has only a single stage with no external review. Proposal Persona Funding organization offers a rapid response fund or another type of grantmaking that requires a streamline process that does not require an external review process. This application process could also be used for in-kind services like coaching, security audits, etc. \ud83d\udc73 Request with External Reviewer \u00b6 The Request - External Reviewer workflow is a single stage application process with functionalties for external reviewers like advisory board members to access applications and submit reviews. Proposal Persona This funding organization relies on external partners for evaluations. Proposals submitted to this workflow are reviewed by staff members and an advisory board that is made up of trusted community members. \ud83d\udc6a Request with Community Review \u00b6 The Request with Community Review workflow is a single stage application process with functionalties for external reviewers, including applicants to carry out peer review of each other applications. Proposal Persona This funding organization works with the community to co-design a meaningful definition of success. Applications are reviewed by staff members and an advisory board that is made up of trusted community members. \ud83d\udca1Concept and Proposal \u00b6 Proposal Persona Applicants could use this workflow to follow the trajectory of the submission process as this workflow is transparent from the concept note (first stage) all the way to the proposal (second stage) with prospective and current applicants about funding priorities and decisions. The proposal stage has functionalities for applications to be reviewed by staff members and an advisory board that is made up of trusted community members. Stage 1 Stage 2","title":"Select a Workflow"},{"location":"staff/set-up-your-first-application/select-a-workflow/#select-a-workflow","text":"The Workflow defines the stages and processes that the application should undertake with OTF. Creating a new Fund or Lab requires you to select one of these workflows. Each workflow has a predetermined amount of stages (e.g. request, proposal), application forms, review forms, and determination forms associated with this Fund or Lab. Each workflow offers different statuses (e.g. External Review, Ready for Determination), and different actions (e.g Invite to proposal). The four hard-coded workflows are: Request, Request with external review, Request with community review, Concept & Proposal.","title":"Select a Workflow"},{"location":"staff/set-up-your-first-application/select-a-workflow/#request","text":"This application process requires less time and effort than the other workflow processes. This workflow has only a single stage with no external review. Proposal Persona Funding organization offers a rapid response fund or another type of grantmaking that requires a streamline process that does not require an external review process. This application process could also be used for in-kind services like coaching, security audits, etc.","title":"\ud83d\udc81 Request"},{"location":"staff/set-up-your-first-application/select-a-workflow/#request-with-external-reviewer","text":"The Request - External Reviewer workflow is a single stage application process with functionalties for external reviewers like advisory board members to access applications and submit reviews. Proposal Persona This funding organization relies on external partners for evaluations. Proposals submitted to this workflow are reviewed by staff members and an advisory board that is made up of trusted community members.","title":"\ud83d\udc73 Request with External Reviewer"},{"location":"staff/set-up-your-first-application/select-a-workflow/#request-with-community-review","text":"The Request with Community Review workflow is a single stage application process with functionalties for external reviewers, including applicants to carry out peer review of each other applications. Proposal Persona This funding organization works with the community to co-design a meaningful definition of success. Applications are reviewed by staff members and an advisory board that is made up of trusted community members.","title":"\ud83d\udc6a Request with Community Review"},{"location":"staff/set-up-your-first-application/select-a-workflow/#concept-and-proposal","text":"Proposal Persona Applicants could use this workflow to follow the trajectory of the submission process as this workflow is transparent from the concept note (first stage) all the way to the proposal (second stage) with prospective and current applicants about funding priorities and decisions. The proposal stage has functionalities for applications to be reviewed by staff members and an advisory board that is made up of trusted community members. Stage 1 Stage 2","title":"\ud83d\udca1Concept and Proposal"},{"location":"staff/set-up-your-first-application/setting-up-a-form/","text":"Setting up a form \u00b6 There are several types of Forms in the WagTail Amin. Forms are used to create a Fund. Application Form Review Form Determination Form","title":"Setting up a form"},{"location":"staff/set-up-your-first-application/setting-up-a-form/#setting-up-a-form","text":"There are several types of Forms in the WagTail Amin. Forms are used to create a Fund. Application Form Review Form Determination Form","title":"Setting up a form"},{"location":"staff/set-up-your-first-application/setting-up-a-round/","text":"Setting up a round \u00b6 Currently users can copy, clone, or duplicate a Fund before creating a new form. Duplicating a Fund/Lab also duplicates the forms associated with that particular Fund or Lab. Users can not preview form, Fund needs to be published on live site for users to view draft or completed version Open Apply and click the bird icon on the bottom-right corner, then click the \u201cGo to Wagtail admin\u201d pop-up Click Apply > Rounds 3. Go to the round and click the Edit button: 4. Enter the Start Date (ie first day of the month) and End Date (ie last day of the month). Not selecting an end date allows the application to be open to the public indefinitely. 7. Update the title and slug. 8. Enter the Lead's name 9. Check to ensure the correct reviewers are highlighted 10. You could save a draft or publish. Publish means the application will be publicly visible to applicants.","title":"Setting up a round"},{"location":"staff/set-up-your-first-application/setting-up-a-round/#setting-up-a-round","text":"Currently users can copy, clone, or duplicate a Fund before creating a new form. Duplicating a Fund/Lab also duplicates the forms associated with that particular Fund or Lab. Users can not preview form, Fund needs to be published on live site for users to view draft or completed version Open Apply and click the bird icon on the bottom-right corner, then click the \u201cGo to Wagtail admin\u201d pop-up Click Apply > Rounds 3. Go to the round and click the Edit button: 4. Enter the Start Date (ie first day of the month) and End Date (ie last day of the month). Not selecting an end date allows the application to be open to the public indefinitely. 7. Update the title and slug. 8. Enter the Lead's name 9. Check to ensure the correct reviewers are highlighted 10. You could save a draft or publish. Publish means the application will be publicly visible to applicants.","title":"Setting up a round"},{"location":"staff/set-up-your-first-application/setting-up-funds-and-labs/","text":"Setting up funds and labs \u00b6 Add a new fund in the top right or copy an existing fund \u00b6 You will then be able to add the following information Name of the fund (Title) Select External Reviewers Workflow Workflow defines the stages and processes that the application should undertake Currently there are four workflows you can select. Assign application forms Select a previously created application form Number validated against the workflow chosen above (i.e. if it is a concept/proposal workflow 2 forms must be selected) Assign review forms Select a previously created review form Number validated against the workflow chosen above (i.e. if it is a concept/proposal workflow 2 forms must be selected) Confirmation email Publishing the fund or lab is required to make sure that the application form is publicly visible to potential applicants.","title":"Setting up funds and labs"},{"location":"staff/set-up-your-first-application/setting-up-funds-and-labs/#setting-up-funds-and-labs","text":"","title":"Setting up funds and labs"},{"location":"staff/set-up-your-first-application/setting-up-funds-and-labs/#add-a-new-fund-in-the-top-right-or-copy-an-existing-fund","text":"You will then be able to add the following information Name of the fund (Title) Select External Reviewers Workflow Workflow defines the stages and processes that the application should undertake Currently there are four workflows you can select. Assign application forms Select a previously created application form Number validated against the workflow chosen above (i.e. if it is a concept/proposal workflow 2 forms must be selected) Assign review forms Select a previously created review form Number validated against the workflow chosen above (i.e. if it is a concept/proposal workflow 2 forms must be selected) Confirmation email Publishing the fund or lab is required to make sure that the application form is publicly visible to potential applicants.","title":"Add a new fund in the top right or copy an existing fund"},{"location":"staff/user-roles/","text":"User Roles \u00b6 The Staff role could submit reviews, send determinations, and set up applications (this means creating Forms, Funds, and Rounds, and give other users (e.g. Reviewers or other Staff) access to applications/submissions. The Reviewer role has their own dashboard and can submit reviews. OTF's Advisory Council Members are often assigned the 'Reviewer' role. The Applicant role can access their own application and communicate with OTF in the communication/comment tab. The Partner role could be access, edit, and communicate about a specific application they are assigned to. This role could be ssed when two or more people are working together on a single application; one applicant gets Applicant role, and additional applicants get this role. OTF use the partner role for fellowship host organizations, service providers, etc. Additional Roles \u00b6 New roles can be created and permissions (capabilities) for these roles can be set in Wagtail by the person deploying Hypha for your organization. For example, several of the following roles were created for different Hypha adopters: Community Reviewer Team Admin Finance Approver","title":"User Roles"},{"location":"staff/user-roles/#user-roles","text":"The Staff role could submit reviews, send determinations, and set up applications (this means creating Forms, Funds, and Rounds, and give other users (e.g. Reviewers or other Staff) access to applications/submissions. The Reviewer role has their own dashboard and can submit reviews. OTF's Advisory Council Members are often assigned the 'Reviewer' role. The Applicant role can access their own application and communicate with OTF in the communication/comment tab. The Partner role could be access, edit, and communicate about a specific application they are assigned to. This role could be ssed when two or more people are working together on a single application; one applicant gets Applicant role, and additional applicants get this role. OTF use the partner role for fellowship host organizations, service providers, etc.","title":"User Roles"},{"location":"staff/user-roles/#additional-roles","text":"New roles can be created and permissions (capabilities) for these roles can be set in Wagtail by the person deploying Hypha for your organization. For example, several of the following roles were created for different Hypha adopters: Community Reviewer Team Admin Finance Approver","title":"Additional Roles"},{"location":"staff/user-roles/applicant/","text":"Applicant \u00b6 Any applicant could create their user account automatically when the applicant submits a submission. An Applicant can: \u00b6 Create, edit, and submit application(s) Contact staff regarding own application Track the status of their application(s) on their platform","title":"Applicant"},{"location":"staff/user-roles/applicant/#applicant","text":"Any applicant could create their user account automatically when the applicant submits a submission.","title":"Applicant"},{"location":"staff/user-roles/applicant/#an-applicant-can","text":"Create, edit, and submit application(s) Contact staff regarding own application Track the status of their application(s) on their platform","title":"An Applicant can:"},{"location":"staff/user-roles/hypha_roles/","text":"Staff \u00b6 Staff can: \u00b6 Create accounts for other Staff , Reviewers , and Applicants Deactivate other user accounts Modify roles for other users Set up applications (this means creating Forms, Funds, and Rounds View applications/submissions Give other users (ie Reviewers, Partners) access to submissions Review submissions Draft and send correspondence Write a comment to applicants and other users on the platform Account created by Staff & assigned to either \"Fund\" or specific application(s)","title":"Staff"},{"location":"staff/user-roles/hypha_roles/#staff","text":"","title":"Staff"},{"location":"staff/user-roles/hypha_roles/#staff-can","text":"Create accounts for other Staff , Reviewers , and Applicants Deactivate other user accounts Modify roles for other users Set up applications (this means creating Forms, Funds, and Rounds View applications/submissions Give other users (ie Reviewers, Partners) access to submissions Review submissions Draft and send correspondence Write a comment to applicants and other users on the platform Account created by Staff & assigned to either \"Fund\" or specific application(s)","title":"Staff can:"},{"location":"staff/user-roles/partner/","text":"Partner \u00b6 A Partner can : \u00b6 View, edit, and communicate about a specific application Used when two or more people are working together on an application; one applicant gets Applicant role, and additional applicants get this role \u2139\ufe0f This role is created by Staff and associated with a specific application The Partner role could be access, edit, and communicate about a specific application they are assigned to. OTF use the partner role for fellowship host organizations, service providers, etc. The Partner could only review applications that has been assigned to them. Applications assigned to the Partner are available on their dashboard. The Partner role could be associated or assigned to an application by clicking on Partner button in the Actions to take > Assign.","title":"Partner"},{"location":"staff/user-roles/partner/#partner","text":"","title":"Partner"},{"location":"staff/user-roles/partner/#a-partner-can","text":"View, edit, and communicate about a specific application Used when two or more people are working together on an application; one applicant gets Applicant role, and additional applicants get this role \u2139\ufe0f This role is created by Staff and associated with a specific application The Partner role could be access, edit, and communicate about a specific application they are assigned to. OTF use the partner role for fellowship host organizations, service providers, etc. The Partner could only review applications that has been assigned to them. Applications assigned to the Partner are available on their dashboard. The Partner role could be associated or assigned to an application by clicking on Partner button in the Actions to take > Assign.","title":"A Partner can:"},{"location":"staff/user-roles/reviewer/","text":"Reviewer \u00b6 Staff could create Reviewer accounts. A Reviewer can: \u00b6 The Staff role could also specify the Reviewer's role level of access and permissions on the platform. Staff could also assign reviewers to specific Funds and Labs, enabling individuals with the reviewer role access to a particular Fund or Lab. Reviewers could access and review application(s) they have been assigned Draft and submit Review Forms for application(s) A reviewer's communication could be visible to staff, applicants, and other reviewers, or only with staff. These settings are determined by the implementing organization.","title":"Reviewer"},{"location":"staff/user-roles/reviewer/#reviewer","text":"Staff could create Reviewer accounts.","title":"Reviewer"},{"location":"staff/user-roles/reviewer/#a-reviewer-can","text":"The Staff role could also specify the Reviewer's role level of access and permissions on the platform. Staff could also assign reviewers to specific Funds and Labs, enabling individuals with the reviewer role access to a particular Fund or Lab. Reviewers could access and review application(s) they have been assigned Draft and submit Review Forms for application(s) A reviewer's communication could be visible to staff, applicants, and other reviewers, or only with staff. These settings are determined by the implementing organization.","title":"A Reviewer can:"}]}